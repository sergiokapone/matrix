from pathlib import Path
from converter.csv2yaml import csv_to_yaml_mappings, create_csv_template, validate_csv_before_conversion
from exporters.excel_exporter import generate_matrices_from_yaml
from exporters.html_report import generate_html_report
from core.statistics import show_statistics
from templator.curriculum_template import create_yaml_template
from utils.file_utils import check_file_exists
from interactive.filling import interactive_fill_mappings
from core.data_validator import validate_data


def handle_csv_conversion(csv_path_str):
    """–û–±—Ä–æ–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó CSV –≤ YAML"""
    csv_path = Path(csv_path_str)
    
    if not csv_path.exists():
        print(f"‚ùå CSV —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {csv_path_str}")
        return False
    
    output_file = csv_path.with_suffix('.yaml')
    success = csv_to_yaml_mappings(csv_path_str, output_file=output_file)
    
    if success:
        print(f"‚úÖ CSV –∫–æ–Ω–≤–µ—Ä—Ç–æ–≤–∞–Ω–æ –≤ YAML: {output_file}")
    
    return success


def handle_excel_export(yaml_file, args, base_dir):
    """–û–±—Ä–æ–±–∫–∞ –µ–∫—Å–ø–æ—Ä—Ç—É –≤ Excel"""
    output_file = base_dir / Path(args.yaml_file).with_suffix(".xlsx")
    generate_matrices_from_yaml(yaml_file, output_file)
    print(f"üìë Excel —Ñ–∞–π–ª –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {output_file}")


def handle_html_generation(yaml_file):
    """–û–±—Ä–æ–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó HTML –∑–≤—ñ—Ç—É"""
    if not Path(yaml_file).exists():
        print(f"‚ùå –§–∞–π–ª {yaml_file} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        return False
    
    generate_html_report(yaml_file)
    return True


def handle_statistics(yaml_file):
    """–û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    if not Path(yaml_file).exists():
        print(f"‚ùå –§–∞–π–ª {yaml_file} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        return False
    
    show_statistics(yaml_file)
    return True


def handle_interactive_filling(yaml_file):
    """–û–ø—Ü—ñ—è 1: –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–µ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è"""
    if not check_file_exists(yaml_file):
        print(f"‚ùå –§–∞–π–ª {yaml_file} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        print("üìù –°—Ç–≤–æ—Ä—ñ—Ç—å —Å–ø–æ—á–∞—Ç–∫—É —à–∞–±–ª–æ–Ω (–æ–ø—Ü—ñ—è 6)")
        return
    
    interactive_fill_mappings(yaml_file)


def handle_excel_generation(yaml_file):
    """–û–ø—Ü—ñ—è 2: –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è Excel"""
    if not check_file_exists(yaml_file):
        print(f"‚ùå –§–∞–π–ª {yaml_file} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        return
    
    excel_file = input(
        f"–ù–∞–∑–≤–∞ Excel —Ñ–∞–π–ª—É (Enter –¥–ª—è {Path(yaml_file).stem}.xlsx): "
    ).strip()
    
    if not excel_file:
        excel_file = f"{Path(yaml_file).stem}.xlsx"
    
    generate_matrices_from_yaml(yaml_file, excel_file)


def handle_html_report(yaml_file):
    """–û–ø—Ü—ñ—è 3: HTML –∑–≤—ñ—Ç"""
    if not check_file_exists(yaml_file):
        print(f"‚ùå –§–∞–π–ª {yaml_file} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        return
    
    generate_html_report(yaml_file)


def handle_data_validation(yaml_file):
    """–û–ø—Ü—ñ—è 5: –í–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö"""
    if not check_file_exists(yaml_file):
        print(f"‚ùå –§–∞–π–ª {yaml_file} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        return
    
    validate_data(yaml_file)


def handle_template_creation(yaml_file):
    """–û–ø—Ü—ñ—è 6: –°—Ç–≤–æ—Ä–∏—Ç–∏ YAML —à–∞–±–ª–æ–Ω"""
    if check_file_exists(yaml_file):
        overwrite = input(
            f"‚ö†Ô∏è  –§–∞–π–ª {yaml_file} –≤–∂–µ —ñ—Å–Ω—É—î. –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç–∏? (y/N): "
        )
        if overwrite.lower() != "y":
            print("‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–æ")
            return
    
    create_yaml_template(yaml_file)


def handle_file_change():
    """–û–ø—Ü—ñ—è 7: –ó–º—ñ–Ω–∏—Ç–∏ —Ä–æ–±–æ—á–∏–π —Ñ–∞–π–ª"""
    new_file = input("–í–≤–µ–¥—ñ—Ç—å —à–ª—è—Ö –¥–æ YAML —Ñ–∞–π–ª—É: ").strip()
    
    if new_file:
        print(f"‚úÖ –†–æ–±–æ—á–∏–π —Ñ–∞–π–ª –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞: {new_file}")
        return new_file
    
    return None


def handle_csv_submenu():
    """–û–ø—Ü—ñ—è 8: CSV –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä (–ø—ñ–¥–º–µ–Ω—é)"""
    print("\nüìã CSV ‚Üí YAML –ö–û–ù–í–ï–†–¢–ï–†")
    print("1. –°—Ç–≤–æ—Ä–∏—Ç–∏ CSV —à–∞–±–ª–æ–Ω")
    print("2. –ö–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏ —ñ—Å–Ω—É—é—á–∏–π CSV")
    print("3. –í–∞–ª—ñ–¥—É–≤–∞—Ç–∏ CSV —Ñ–∞–π–ª")
    
    sub_choice = input("–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é (1-3): ").strip()
    
    if sub_choice == "1":
        handle_csv_template_creation()
    elif sub_choice == "2":
        handle_csv_file_conversion()
    elif sub_choice == "3":
        handle_csv_validation()


def handle_csv_template_creation():
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è CSV —à–∞–±–ª–æ–Ω—É"""
    template_name = input("–ù–∞–∑–≤–∞ CSV —à–∞–±–ª–æ–Ω—É (Enter –¥–ª—è 'template.csv'): ").strip()
    
    if not template_name:
        template_name = "template.csv"
    
    create_csv_template(template_name)


def handle_csv_file_conversion():
    """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è CSV —Ñ–∞–π–ª—É –≤ YAML"""
    csv_file = input("–®–ª—è—Ö –¥–æ CSV —Ñ–∞–π–ª—É: ").strip()
    
    if not csv_file:
        print("‚ùå –ù–µ –≤–∫–∞–∑–∞–Ω–æ —Ñ–∞–π–ª")
        return
    
    if not Path(csv_file).exists():
        print(f"‚ùå –§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {csv_file}")
        return
    
    output_file = Path(csv_file).with_suffix('.yaml')
    success = csv_to_yaml_mappings(csv_file=csv_file, output_file=output_file)
    
    if success:
        print(f"‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {output_file}")


def handle_csv_validation():
    """–í–∞–ª—ñ–¥–∞—Ü—ñ—è CSV —Ñ–∞–π–ª—É"""
    csv_file = input("–®–ª—è—Ö –¥–æ CSV —Ñ–∞–π–ª—É –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó: ").strip()
    
    if csv_file and Path(csv_file).exists():
        validate_csv_before_conversion(csv_file)
    else:
        print("‚ùå –§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")


def handle_quick_commands(args, yaml_file, base_dir):
    """–û–±—Ä–æ–±–∫–∞ —à–≤–∏–¥–∫–∏—Ö –∫–æ–º–∞–Ω–¥ –±–µ–∑ –º–µ–Ω—é"""
    # CSV –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è
    if args.csv:
        handle_csv_conversion(args.csv)
        return True
    
    # Excel –µ–∫—Å–ø–æ—Ä—Ç
    if args.excel:
        handle_excel_export(yaml_file, args, base_dir)
        return True
    
    # HTML –∑–≤—ñ—Ç
    if args.html:
        handle_html_generation(yaml_file)
        return True
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    if args.stats:
        handle_statistics(yaml_file)
        return True
    
    return False

def handle_statistics_display(yaml_file):
    """–û–ø—Ü—ñ—è 4: –ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    if not check_file_exists(yaml_file):
        print(f"‚ùå –§–∞–π–ª {yaml_file} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        return
    
    show_statistics(yaml_file)