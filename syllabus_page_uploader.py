#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import yaml
import requests
from requests.auth import HTTPBasicAuth
from jinja2 import Environment, FileSystemLoader
import os
from datetime import datetime
import re
from dotenv import load_dotenv

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
WP_SITE_URL = "https://apd.ipt.kpi.ua"
load_dotenv()  # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è –∑ .env —Ñ–∞–π–ª—É
WP_AUTH = (os.getenv("WP_USER"), os.getenv("WP_PASSWORD"))
WP_URL = "https://apd.ipt.kpi.ua/wp-json/wp/v2/pages"

def update_wordpress_page(content, page_id=None, site_url=None):
    """–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ WordPress"""
    if site_url is None:
        site_url = WP_SITE_URL
        
    url = f"{site_url}/wp-json/wp/v2/pages/{page_id}"
    # auth = HTTPBasicAuth(WP_USERNAME, WP_PASSWORD)
    
    data = {
        'content': content,
        'status': 'publish'
    }
    
    check_response = requests.get(WP_URL, auth=WP_AUTH)

    if check_response.status_code == 200:
        existing_pages = check_response.json()
        if existing_pages:
            # page_id = existing_pages[0]['id']
            print(f"‚ôªÔ∏è –û–Ω–æ–≤–ª—é—î–º–æ —ñ—Å–Ω—É—é—á—É —Å—Ç–æ—Ä—ñ–Ω–∫—É –∑ id={page_id})")

            # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É —á–µ—Ä–µ–∑ POST (–±–æ PUT/DELETE –∑–∞–±–æ—Ä–æ–Ω–µ–Ω—ñ —Å–µ—Ä–≤–µ—Ä–æ–º)
            update_url = f"{WP_URL}/{page_id}"
            update_response = requests.post(update_url, json=data, auth=WP_AUTH)

            if update_response.status_code == 200:
                created_link = update_response.json().get('link')
                print(f"‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É: {created_link}")
            else:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {update_response.status_code} ‚Üí {update_response.text}")

def load_yaml_data(yaml_file=None):
    """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ YAML"""
    with open(yaml_file, 'r', encoding='utf-8') as f:
        return yaml.safe_load(f)

def prepare_disciplines(disciplines):
    """–ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω –¥–ª—è —à–∞–±–ª–æ–Ω—É"""
    general = []
    professional = []
    
    for code in sorted(disciplines.keys(), key=lambda x: int(re.findall(r'\d+', x)[0])):
        discipline = disciplines[code]
        
        # –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è
        name = discipline['name']

        
        item = {
            'code': code,
            'name': name,
            'credits': discipline.get('credits', 'N/A'),
            'control': discipline.get('control', 'N/A'),
            'syllabus_url': discipline.get('syllabus_url'),
            'description': discipline.get('description', ''),
            'lecturer': discipline.get('lecturer'),
            'subdisciplines': discipline.get('subdisciplines', {}),
        }
        
        if code.startswith('–ó–û'):
            general.append(item)
        elif code.startswith('–ü–û'):
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –¥–æ—Å–ª—ñ–¥–Ω–∏—Ü—å–∫–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
            professional.append(item)
    
    return general, professional

def generate_content():
    """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è HTML –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ
    data = load_yaml_data()
    metadata = data.get('metadata', {})
    disciplines = data.get('disciplines', {})
    
    # –ü—ñ–¥–≥–æ—Ç–æ–≤—É—î–º–æ –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω–∏
    general, professional = prepare_disciplines(disciplines)
    
    # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ Jinja2
    env = Environment(loader=FileSystemLoader('templates'))
    template = env.get_template('syllabus_page.html')
    
    # –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —à–∞–±–ª–æ–Ω—É
    context = {
        'metadata': metadata,
        'current_date': datetime.now().strftime('%d.%m.%Y'),
        'general_disciplines': general,
        'professional_disciplines': professional
    }
    
    return template.render(context)


def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑ CLI –æ–ø—Ü—ñ—è–º–∏"""
    import argparse
    
    parser = argparse.ArgumentParser(
        description='–ü—Ä–æ—Å—Ç–∏–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–∏–ª–∞–±—É—Å—ñ–≤',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog='''
–ü—Ä–∏–∫–ª–∞–¥–∏:
  python syllabi_generator.py                    # –ó–≤–∏—á–∞–π–Ω–∏–π –∑–∞–ø—É—Å–∫
  python syllabi_generator.py --preview-only     # –¢—ñ–ª—å–∫–∏ –ø—Ä–µ–≤—å—é
  python syllabi_generator.py --page-id 123      # –ö–∞—Å—Ç–æ–º–Ω–∏–π ID —Å—Ç–æ—Ä—ñ–Ω–∫–∏
  python syllabi_generator.py --yaml data/test.yaml  # –Ü–Ω—à–∏–π YAML —Ñ–∞–π–ª
        '''
    )
    
    parser.add_argument('--preview-only', '-p', 
                       action='store_true',
                       help='–¢—ñ–ª—å–∫–∏ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–µ–≤—å—é, –Ω–µ –æ–Ω–æ–≤–ª—é–≤–∞—Ç–∏ WordPress')
    
    parser.add_argument('--page-id', 
                       type=int, 
                       help=f'ID —Å—Ç–æ—Ä—ñ–Ω–∫–∏ WordPress')
    
    parser.add_argument('--yaml', 
                       default='data/program_data.yaml',
                       help='–®–ª—è—Ö –¥–æ YAML —Ñ–∞–π–ª—É (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º: data/program_data.yaml)')
    
    parser.add_argument('--template', 
                       default='templates/syllabus_template.html',
                       help='–®–ª—è—Ö –¥–æ —à–∞–±–ª–æ–Ω—É (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º: templates/syllabus_template.html)')
    
    parser.add_argument('--site-url', 
                       default=WP_SITE_URL,
                       help=f'URL —Å–∞–π—Ç—É (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º: {WP_SITE_URL})')
    
    parser.add_argument('--preview-file', 
                       default='preview.html',
                       help='–Ü–º\'—è —Ñ–∞–π–ª—É –ø—Ä–µ–≤—å—é (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º: preview.html)')
    

    
    args = parser.parse_args()
    
    print("üöÄ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Å–∏–ª–∞–±—É—Å—ñ–≤...")
    print(f"üìÅ YAML —Ñ–∞–π–ª: {args.yaml}")
    print(f"üìÑ –®–∞–±–ª–æ–Ω: {args.template}")
    
    try:
        # –ì–µ–Ω–µ—Ä—É—î–º–æ –∫–æ–Ω—Ç–µ–Ω—Ç –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∑ CLI
        content = generate_content_with_template(args.template, args.yaml)
        print("üìù –ö–æ–Ω—Ç–µ–Ω—Ç –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ")
        
        # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–µ–≤—å—é
        with open(args.preview_file, 'w', encoding='utf-8') as f:
            f.write(f'<!DOCTYPE html><html><head><meta charset="UTF-8"><title>–ü—Ä–µ–≤—å—é —Å–∏–ª–∞–±—É—Å—ñ–≤</title></head><body>{content}</body></html>')
        print(f"üëÄ –ü—Ä–µ–≤—å—é –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ {args.preview_file}")
        
        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è WordPress (—è–∫—â–æ –Ω–µ —Ç—ñ–ª—å–∫–∏ –ø—Ä–µ–≤—å—é)
        if not args.preview_only:
            print(f"üåê –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ ID: {args.page_id}")
            success = update_wordpress_page(content, args.page_id, args.site_url)
            if success:
                print("üéâ –ì–æ—Ç–æ–≤–æ!")
        else:
            print("üìã –†–µ–∂–∏–º —Ç—ñ–ª—å–∫–∏ –ø—Ä–µ–≤—å—é - WordPress –Ω–µ –æ–Ω–æ–≤–ª—é—î—Ç—å—Å—è")
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        exit(1)

def generate_content_with_template(template_path, yaml_file=None):
    """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è HTML –∫–æ–Ω—Ç–µ–Ω—Ç—É –∑ –∫–∞—Å—Ç–æ–º–Ω–∏–º —à–∞–±–ª–æ–Ω–æ–º"""
    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ
    data = load_yaml_data(yaml_file)
    metadata = data.get('metadata', {})
    disciplines = data.get('disciplines', {})
    
    # –ü—ñ–¥–≥–æ—Ç–æ–≤—É—î–º–æ –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω–∏
    general, professional = prepare_disciplines(disciplines)
    
    # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ Jinja2 –∑ –∫–∞—Å—Ç–æ–º–Ω–∏–º —à–ª—è—Ö–æ–º
    import os
    template_dir = os.path.dirname(template_path)
    template_name = os.path.basename(template_path)
    
    env = Environment(loader=FileSystemLoader(template_dir or '.'))
    template = env.get_template(template_name)
    
    # –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —à–∞–±–ª–æ–Ω—É
    context = {
        'page_title': '–°–∏–ª–∞–±—É—Å–∏ –æ—Å–≤—ñ—Ç–Ω—å–æ-–Ω–∞—É–∫–æ–≤–æ—ó –ø—Ä–æ–≥—Ä–∞–º–∏ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏ –º–∞–≥—ñ—Å—Ç—Ä—ñ–≤',
        'metadata': metadata,
        'current_date': datetime.now().strftime('%d.%m.%Y'),
        'general_disciplines': general,
        'professional_disciplines': professional, 
    }
    
    return template.render(context)

if __name__ == "__main__":
    main()