#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import re
from jinja2 import Environment, FileSystemLoader
from pathlib import Path
from datetime import datetime
from dotenv import load_dotenv

from core.yaml_handler import load_yaml_data
from core.wp_uploader import update_wordpress_page
from core.wp_uploader import WP_URL


YAML_LECTURERS = Path("data") / "lecturers.yaml"


def load_lecturers_data():
    """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –ª–µ–∫—Ç–æ—Ä—ñ–≤"""
    return load_yaml_data(YAML_LECTURERS)


def extract_discipline_code_number(code):
    """–í–∏—Ç—è–≥—É—î –Ω–æ–º–µ—Ä –∑ –∫–æ–¥—É –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω–∏ –¥–ª—è —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è"""
    numbers = re.findall(r'\d+', code)
    return int(numbers[0]) if numbers else 0


def enrich_discipline_with_lecturer(discipline, lecturers):
    """–î–æ–¥–∞—î –ø–æ–≤–Ω—ñ –¥–∞–Ω—ñ –ª–µ–∫—Ç–æ—Ä–∞ –¥–æ –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω–∏"""
    if "lecturer_id" in discipline:
        lecturer_id = discipline["lecturer_id"]
        discipline["lecturer"] = lecturers.get(lecturer_id)
    return discipline


def create_discipline_item(code, discipline):
    """–°—Ç–≤–æ—Ä—é—î —Å–ª–æ–≤–Ω–∏–∫ –∑ –¥–∞–Ω–∏–º–∏ –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω–∏ –¥–ª—è —à–∞–±–ª–æ–Ω—É"""
    return {
        'code': code,
        'name': discipline['name'],
        'credits': discipline.get('credits', 'N/A'),
        'control': discipline.get('control', 'N/A'),
        'syllabus_url': discipline.get('syllabus_url'),
        'description': discipline.get('description', ''),
        'lecturer': discipline.get('lecturer'),
        'subdisciplines': discipline.get('subdisciplines', {}),
    }


def categorize_discipline(code, item, general, professional, elevative):
    """–†–æ–∑–ø–æ–¥—ñ–ª—è—î –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö"""
    if code.startswith('–ó–û'):
        general.append(item)
    elif code.startswith('–ü–û'):
        professional.append(item)
    elif code.startswith('–ü–í'):
        elevative.append(item)


def prepare_disciplines(disciplines):
    """–ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω –¥–ª—è —à–∞–±–ª–æ–Ω—É"""
    general = []
    professional = []
    elevative = []

    lecturers = load_lecturers_data()
    
    sorted_codes = sorted(disciplines.keys(), key=extract_discipline_code_number)
    
    for code in sorted_codes:
        discipline = disciplines[code]
        discipline = enrich_discipline_with_lecturer(discipline, lecturers)
        item = create_discipline_item(code, discipline)
        categorize_discipline(code, item, general, professional, elevative)
            
    return general, professional, elevative


def load_program_data(yaml_file):
    """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ–≥—Ä–∞–º–∏ –∑ YAML"""
    data = load_yaml_data(yaml_file)
    metadata = data.get('metadata', {})
    disciplines = data.get('disciplines', {}) | data.get('elevative_disciplines', {})
    return metadata, disciplines


def setup_jinja_environment(template_path):
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Jinja2 Environment"""
    template_dir = os.path.dirname(template_path)
    template_name = os.path.basename(template_path)
    env = Environment(loader=FileSystemLoader(template_dir or '.'))
    return env, template_name


def create_template_context(metadata, general, professional, elevate):
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –¥–ª—è —à–∞–±–ª–æ–Ω—É"""
    return {
        'page_title': '–°–∏–ª–∞–±—É—Å–∏ –æ—Å–≤—ñ—Ç–Ω—å–æ-–Ω–∞—É–∫–æ–≤–æ—ó –ø—Ä–æ–≥—Ä–∞–º–∏ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏ –º–∞–≥—ñ—Å—Ç—Ä—ñ–≤',
        'metadata': metadata,
        'current_date': datetime.now().strftime('%d.%m.%Y'),
        'general_disciplines': general,
        'professional_disciplines': professional, 
        'elevate_disciplines': elevate, 
    }


def generate_content_with_template(template_path, yaml_file=None):
    """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è HTML –∫–æ–Ω—Ç–µ–Ω—Ç—É –∑ –∫–∞—Å—Ç–æ–º–Ω–∏–º —à–∞–±–ª–æ–Ω–æ–º"""
    metadata, disciplines = load_program_data(yaml_file)
    general, professional, elevate = prepare_disciplines(disciplines)
    
    env, template_name = setup_jinja_environment(template_path)
    template = env.get_template(template_name)
    
    context = create_template_context(metadata, general, professional, elevate)
    
    return template.render(context)


def save_preview_file(content, preview_file):
    """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–µ–≤—å—é HTML —Ñ–∞–π–ª—É"""
    html_wrapper = (
        f'<!DOCTYPE html>'
        f'<html>'
        f'<head><meta charset="UTF-8"><title>–ü—Ä–µ–≤—å—é —Å–∏–ª–∞–±—É—Å—ñ–≤</title></head>'
        f'<body>{content}</body>'
        f'</html>'
    )
    
    with open(preview_file, 'w', encoding='utf-8') as f:
        f.write(html_wrapper)
    
    print(f"üëÄ –ü—Ä–µ–≤—å—é –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ {preview_file}")


def upload_to_wordpress(content, page_id, site_url):
    """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É –Ω–∞ WordPress"""
    print(f"üåê –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ ID: {page_id}")
    success = update_wordpress_page(content, page_id, site_url)
    if success:
        print("üéâ –ì–æ—Ç–æ–≤–æ!")
    return success


def parse_arguments():
    """–ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ —Ä—è–¥–∫–∞"""
    import argparse
    
    parser = argparse.ArgumentParser(
        description='–ü—Ä–æ—Å—Ç–∏–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–∏–ª–∞–±—É—Å—ñ–≤',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog='''
–ü—Ä–∏–∫–ª–∞–¥–∏:
  python syllabi_generator.py                    # –ó–≤–∏—á–∞–π–Ω–∏–π –∑–∞–ø—É—Å–∫
  python syllabi_generator.py --preview-only     # –¢—ñ–ª—å–∫–∏ –ø—Ä–µ–≤—å—é
  python syllabi_generator.py --page-id 123      # –ö–∞—Å—Ç–æ–º–Ω–∏–π ID —Å—Ç–æ—Ä—ñ–Ω–∫–∏
  python syllabi_generator.py --yaml data/test.yaml  # –Ü–Ω—à–∏–π YAML —Ñ–∞–π–ª
        '''
    )
    
    parser.add_argument('--preview-only', '-p', 
                       action='store_true',
                       help='–¢—ñ–ª—å–∫–∏ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–µ–≤—å—é, –Ω–µ –æ–Ω–æ–≤–ª—é–≤–∞—Ç–∏ WordPress')
    
    parser.add_argument('--page-id', 
                       type=int, 
                       help=f'ID —Å—Ç–æ—Ä—ñ–Ω–∫–∏ WordPress')
    
    parser.add_argument('--yaml', 
                       default='data/program_data.yaml',
                       help='–®–ª—è—Ö –¥–æ YAML —Ñ–∞–π–ª—É (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º: data/program_data.yaml)')
    
    parser.add_argument('--template', 
                       default='templates/syllabus_template.html',
                       help='–®–ª—è—Ö –¥–æ —à–∞–±–ª–æ–Ω—É (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º: templates/syllabus_template.html)')
    
    parser.add_argument('--site-url', 
                       default=WP_URL,
                       help=f'URL —Å–∞–π—Ç—É (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º: {WP_URL})')
    
    parser.add_argument('--preview-file', 
                       default='preview.html',
                       help='–Ü–º\'—è —Ñ–∞–π–ª—É –ø—Ä–µ–≤—å—é (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º: preview.html)')
    
    return parser.parse_args()


def print_generation_info(args):
    """–í–∏–≤–µ–¥–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é"""
    print("üöÄ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Å–∏–ª–∞–±—É—Å—ñ–≤...")
    print(f"üìÅ YAML —Ñ–∞–π–ª: {args.yaml}")
    print(f"üìÑ –®–∞–±–ª–æ–Ω: {args.template}")


def handle_preview_only_mode():
    """–û–±—Ä–æ–±–∫–∞ —Ä–µ–∂–∏–º—É —Ç—ñ–ª—å–∫–∏ –ø—Ä–µ–≤—å—é"""
    print("üìã –†–µ–∂–∏–º —Ç—ñ–ª—å–∫–∏ –ø—Ä–µ–≤—å—é - WordPress –Ω–µ –æ–Ω–æ–≤–ª—é—î—Ç—å—Å—è")


def process_syllabi_generation(args):
    """–û—Å–Ω–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Å–∏–ª–∞–±—É—Å—ñ–≤"""
    print_generation_info(args)
    
    content = generate_content_with_template(args.template, args.yaml)
    print("üìù –ö–æ–Ω—Ç–µ–Ω—Ç –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ")
    
    save_preview_file(content, args.preview_file)
    
    if not args.preview_only:
        upload_to_wordpress(content, args.page_id, args.site_url)
    else:
        handle_preview_only_mode()


def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑ CLI –æ–ø—Ü—ñ—è–º–∏"""
    args = parse_arguments()
    
    try:
        process_syllabi_generation(args)
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        exit(1)


if __name__ == "__main__":
    main()