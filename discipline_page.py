import yaml
from pathlib import Path
from jinja2 import Environment, FileSystemLoader, Template

def generate_discipline_page(yaml_file, discipline_code, output_file=None, template_dir="templates", template_name="discipline_template.html"):
    """–ì–µ–Ω–µ—Ä—É—î HTML —Å—Ç–æ—Ä—ñ–Ω–∫—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω–∏"""
    
    # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ Jinja2 environment
    jinja_env = setup_jinja_environment(template_dir)
    
    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ
    data = load_yaml_data(yaml_file)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω–∏
    if discipline_code not in data['disciplines']:
        print(f"‚ùå –î–∏—Å—Ü–∏–ø–ª—ñ–Ω–∞ {discipline_code} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞!")
        return False
    
    try:
        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —à–∞–±–ª–æ–Ω –∑ –ø–∞–ø–∫–∏ templates
        template = jinja_env.get_template(template_name)
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —à–∞–±–ª–æ–Ω—É {template_name}: {e}")
        return False
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω–∏
    discipline = data['disciplines'][discipline_code]
    metadata = data.get('metadata', {})
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü—ñ—ó —Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
    general_comps, professional_comps = get_mapped_competencies(
        discipline_code, data.get('mappings', {}), data.get('competencies', {}))
    
    program_results = get_mapped_program_results(
        discipline_code, data.get('mappings', {}), data.get('program_results', {}))
    
    # –ü—ñ–¥–≥–æ—Ç–æ–≤—É—î–º–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —à–∞–±–ª–æ–Ω—É
    context = {
        'discipline_code': discipline_code,
        'discipline': discipline,
        'metadata': metadata,
        'general_competencies': general_comps,
        'professional_competencies': professional_comps,
        'mapped_program_results': program_results
    }
    
    # –†–µ–Ω–¥–µ—Ä–∏–º–æ —à–∞–±–ª–æ–Ω
    html_content = template.render(context)
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ñ–∞–π–ª
    if not output_file:
        safe_name = discipline_code.replace(' ', '_').replace('/', '_')
        output_file = f"discipline_{safe_name}.html"
    
    with open(output_file, 'w', encoding='utf-8') as f:
        f.write(html_content)
    
    print(f"‚úÖ –°—Ç–æ—Ä—ñ–Ω–∫–∞ –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω–∏ —Å—Ç–≤–æ—Ä–µ–Ω–∞: {output_file}")
    return True

def generate_all_disciplines(yaml_file, output_dir="disciplines", template_dir="templates", template_name="discipline_template.html"):
    """–ì–µ–Ω–µ—Ä—É—î —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –¥–ª—è –≤—Å—ñ—Ö –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω"""
    
    # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ Jinja2 environment
    jinja_env = setup_jinja_environment(template_dir)
    
    data = load_yaml_data(yaml_file)
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –¥–ª—è –≤–∏–≤–æ–¥—É
    output_path = Path(output_dir)
    output_path.mkdir(exist_ok=True)
    
    disciplines = data.get('disciplines', {})
    
    print(f"üöÄ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Å—Ç–æ—Ä—ñ–Ω–æ–∫ –¥–ª—è {len(disciplines)} –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω...")
    print(f"üìÑ –®–∞–±–ª–æ–Ω: {template_dir}/{template_name}")
    
    success_count = 0
    for discipline_code in disciplines.keys():
        safe_name = discipline_code.replace(' ', '_').replace('/', '_')
        output_file = output_path / f"{safe_name}.html"
        
        if generate_discipline_page(yaml_file, discipline_code, output_file, template_dir, template_name):
            success_count += 1
    
    print(f"‚úÖ –£—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ {success_count} —Å—Ç–æ—Ä—ñ–Ω–æ–∫ —É –ø–∞–ø—Ü—ñ {output_dir}")

def generate_index_page(yaml_file, output_file="index.html", template_dir="templates", template_name="index_template.html"):
    """–ì–µ–Ω–µ—Ä—É—î —ñ–Ω–¥–µ–∫—Å–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É –∑—ñ —Å–ø–∏—Å–∫–æ–º –≤—Å—ñ—Ö –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω"""
    
    # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ Jinja2 environment
    jinja_env = setup_jinja_environment(template_dir)
    
    data = load_yaml_data(yaml_file)
    metadata = data.get('metadata', {})
    disciplines = data.get('disciplines', {})
    
    try:
        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —à–∞–±–ª–æ–Ω —ñ–Ω–¥–µ–∫—Å—É –∑ –ø–∞–ø–∫–∏ templates
        template = jinja_env.get_template(template_name)
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —à–∞–±–ª–æ–Ω—É {template_name}: {e}")
        return False
    
    # –†–µ–Ω–¥–µ—Ä–∏–º–æ —à–∞–±–ª–æ–Ω
    html_content = template.render(metadata=metadata, disciplines=disciplines)
    
    with open(output_file, 'w', encoding='utf-8') as f:
        f.write(html_content)
    
    print(f"üìã –Ü–Ω–¥–µ–∫—Å–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–∞: {output_file}")
from pathlib import Path
from jinja2 import Environment, FileSystemLoader, Template

def setup_jinja_environment(template_dir="templates"):
    """–ù–∞–ª–∞—à—Ç–æ–≤—É—î Jinja2 Environment –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –ø–∞–ø–∫–æ—é —à–∞–±–ª–æ–Ω—ñ–≤"""
    template_path = Path(template_dir)
        
    return Environment(loader=FileSystemLoader(template_dir))


def load_template(template_file="discipline_template.html"):
    """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —à–∞–±–ª–æ–Ω –∑ —Ñ–∞–π–ª—É (deprecated - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ setup_jinja_environment)"""
    template_path = Path(template_file)
        
    with open(template_path, 'r', encoding='utf-8') as f:
        return f.read()

def load_yaml_data(yaml_file):
    """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –¥–∞–Ω—ñ –∑ YAML —Ñ–∞–π–ª—É"""
    with open(yaml_file, 'r', encoding='utf-8') as f:
        return yaml.safe_load(f)

def get_mapped_competencies(discipline_code, mappings, all_competencies):
    """–û—Ç—Ä–∏–º—É—î –∫–æ–º–ø–µ—Ç–µ–Ω—Ü—ñ—ó –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω–∏ —Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ –Ω–∞ –∑–∞–≥–∞–ª—å–Ω—ñ —Ç–∞ —Ñ–∞—Ö–æ–≤—ñ"""
    if discipline_code not in mappings:
        return [], []
    
    mapped_comps = mappings[discipline_code].get('competencies', [])
    
    general_competencies = []
    professional_competencies = []
    
    for comp_code in mapped_comps:
        if comp_code in all_competencies:
            comp_desc = all_competencies[comp_code]
            if comp_code.startswith('–ó–ö'):
                general_competencies.append((comp_code, comp_desc))
            elif comp_code.startswith('–§–ö'):
                professional_competencies.append((comp_code, comp_desc))
    
    return general_competencies, professional_competencies

def get_mapped_program_results(discipline_code, mappings, all_program_results):
    """–û—Ç—Ä–∏–º—É—î –ø—Ä–æ–≥—Ä–∞–º–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω–∏"""
    if discipline_code not in mappings:
        return []
    
    mapped_results = mappings[discipline_code].get('program_results', [])
    
    program_results = []
    for prn_code in mapped_results:
        if prn_code in all_program_results:
            program_results.append((prn_code, all_program_results[prn_code]))
    
    return program_results

from jinja2 import Environment, FileSystemLoader
import os

def generate_discipline_page(yaml_file, discipline_code, output_file=None, template_file="discipline_template.html"):
    """–ì–µ–Ω–µ—Ä—É—î HTML —Å—Ç–æ—Ä—ñ–Ω–∫—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω–∏ —á–µ—Ä–µ–∑ Jinja2 —à–∞–±–ª–æ–Ω"""
    
    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ
    data = load_yaml_data(yaml_file)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω–∏
    if discipline_code not in data['disciplines']:
        print(f"‚ùå –î–∏—Å—Ü–∏–ø–ª—ñ–Ω–∞ {discipline_code} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞!")
        return False
    
    discipline = data['disciplines'][discipline_code]
    metadata = data.get('metadata', {})

    # –í—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü—ñ—ó —Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
    general_comps, professional_comps = get_mapped_competencies(
        discipline_code, data.get('mappings', {}), data.get('competencies', {}))
    program_results = get_mapped_program_results(
        discipline_code, data.get('mappings', {}), data.get('program_results', {}))

    # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
    context = {
        'discipline_code': discipline_code,
        'discipline': discipline,
        'metadata': metadata,
        'general_competencies': general_comps,
        'professional_competencies': professional_comps,
        'mapped_program_results': program_results
    }

    # –ü–∞–ø–∫–∞ –∑ —à–∞–±–ª–æ–Ω–∞–º–∏
    templates_dir = os.path.join(os.path.dirname(__file__), "templates")
    env = Environment(loader=FileSystemLoader(templates_dir), autoescape=True)
    
    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —à–∞–±–ª–æ–Ω
    template = env.get_template(template_file)
    
    # –†–µ–Ω–¥–µ—Ä–∏–º–æ HTML
    html_content = template.render(context)
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ñ–∞–π–ª
    if not output_file:
        safe_name = discipline_code.replace(' ', '_').replace('/', '_')
        output_file = f"discipline_{safe_name}.html"
    
    with open(output_file, 'w', encoding='utf-8') as f:
        f.write(html_content)
    
    print(f"‚úÖ –°—Ç–æ—Ä—ñ–Ω–∫–∞ –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω–∏ —Å—Ç–≤–æ—Ä–µ–Ω–∞: {output_file}")
    return True


def generate_all_disciplines(yaml_file, output_dir="disciplines", template_file="discipline_template.html"):
    """–ì–µ–Ω–µ—Ä—É—î —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –¥–ª—è –≤—Å—ñ—Ö –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω"""
    
    data = load_yaml_data(yaml_file)
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –¥–ª—è –≤–∏–≤–æ–¥—É
    output_path = Path(output_dir)
    output_path.mkdir(exist_ok=True)
    
    disciplines = data.get('disciplines', {})
    
    print(f"üöÄ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Å—Ç–æ—Ä—ñ–Ω–æ–∫ –¥–ª—è {len(disciplines)} –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω...")
    print(f"üìÑ –®–∞–±–ª–æ–Ω: {template_file}")
    
    success_count = 0
    for discipline_code in disciplines.keys():
        safe_name = discipline_code.replace(' ', '_').replace('/', '_')
        output_file = output_path / f"{safe_name}.html"
        
        if generate_discipline_page(yaml_file, discipline_code, output_file, template_file):
            success_count += 1
    
    print(f"‚úÖ –£—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ {success_count} —Å—Ç–æ—Ä—ñ–Ω–æ–∫ —É –ø–∞–ø—Ü—ñ {output_dir}")

def generate_index_page(yaml_file, output_file="index.html"):
    """–ì–µ–Ω–µ—Ä—É—î —ñ–Ω–¥–µ–∫—Å–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É –∑—ñ —Å–ø–∏—Å–∫–æ–º –≤—Å—ñ—Ö –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω —á–µ—Ä–µ–∑ Jinja2 —à–∞–±–ª–æ–Ω"""
    
    data = load_yaml_data(yaml_file)
    metadata = data.get('metadata', {})
    disciplines = data.get('disciplines', {})

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å—É–º–º–∞—Ä–Ω—ã—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤ –∏ –∫–æ–Ω—Ç—Ä–æ–ª—è –¥–ª—è –ø–æ–¥–¥–∏—Å—Ü–∏–ø–ª–∏–Ω
    for code, discipline in disciplines.items():
        if 'subdisciplines' in discipline and discipline['subdisciplines']:
            # –°—É–º–º–∏—Ä—É–µ–º –∫—Ä–µ–¥–∏—Ç—ã –ø–æ–¥–¥–∏—Å—Ü–∏–ø–ª–∏–Ω
            total_credits = sum(sub.get('credits', 0) for sub in discipline['subdisciplines'].values())
            # –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ñ–æ—Ä–º—ã –∫–æ–Ω—Ç—Ä–æ–ª—è
            controls = list({sub.get('control') for sub in discipline['subdisciplines'].values() if sub.get('control')})
            discipline['total_credits'] = total_credits
            discipline['all_controls'] = ', '.join(controls)
        else:
            discipline['total_credits'] = discipline.get('credits', 0)
            discipline['all_controls'] = discipline.get('control', '')

    # –í–∫–∞–∑—É—î–º–æ Jinja2 –Ω–∞ –ø–∞–ø–∫—É –∑ —à–∞–±–ª–æ–Ω–∞–º–∏
    templates_dir = os.path.join(os.path.dirname(__file__), "templates")
    env = Environment(loader=FileSystemLoader(templates_dir), autoescape=True)
    
    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —à–∞–±–ª–æ–Ω
    template = env.get_template("index_template.html")
    
    # –†–µ–Ω–¥–µ—Ä–∏–º–æ HTML
    html_content = template.render(metadata=metadata, disciplines=disciplines)
    
    # –ó–∞–ø–∏—Å—É—î–º–æ —É —Ñ–∞–π–ª
    with open(output_file, 'w', encoding='utf-8') as f:
        f.write(html_content)
    
    print(f"üìã –Ü–Ω–¥–µ–∫—Å–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–∞: {output_file}")


def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑ CLI —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º"""
    import argparse

    parser = argparse.ArgumentParser(description='–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å—Ç–æ—Ä—ñ–Ω–æ–∫ –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω –¥–ª—è WordPress')
    parser.add_argument('yaml_file', help='–®–ª—è—Ö –¥–æ YAML —Ñ–∞–π–ª—É –∑ –¥–∞–Ω–∏–º–∏')
    parser.add_argument('--discipline', '-d', help='–ö–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó')
    parser.add_argument('--template', '-t', default="discipline_template.html",
                    help='–§–∞–π–ª —à–∞–±–ª–æ–Ω—É –≤ –ø–∞–ø—Ü—ñ templates/')
    parser.add_argument('--all', '-a', action='store_true', help='–ì–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –¥–ª—è –≤—Å—ñ—Ö –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω')
    parser.add_argument('--index', '-i', action='store_true', help='–°—Ç–≤–æ—Ä–∏—Ç–∏ —ñ–Ω–¥–µ–∫—Å–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É')
    parser.add_argument('--output', '-o', help='–í–∏—Ö—ñ–¥–Ω–∏–π —Ñ–∞–π–ª –∞–±–æ –ø–∞–ø–∫–∞')

    args = parser.parse_args()

    yaml_file = Path("data") / args.yaml_file

    if not Path(yaml_file).exists():
        print(f"‚ùå YAML —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {yaml_file}")
        return

    if args.discipline:
        # –ì–µ–Ω–µ—Ä—É—î–º–æ –æ–¥–Ω—É –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω—É

        # –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É disciplines, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        output_dir = Path("disciplines")
        output_dir.mkdir(exist_ok=True)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        safe_name = args.discipline.replace(' ', '_').replace('/', '_')
        output_file = output_dir / f"{safe_name}.html"

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ–¥–Ω–æ–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã
        generate_discipline_page(yaml_file, args.discipline, output_file, args.template)

    elif args.all:
        # –ì–µ–Ω–µ—Ä—É—î–º–æ –≤—Å—ñ –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω–∏
        output_dir = args.output if args.output else "disciplines"
        generate_all_disciplines(yaml_file, output_dir)

    elif args.index:
        # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞–ø–∫—É disciplines, —è–∫—â–æ —ó—ó –Ω–µ–º–∞—î
        output_dir = Path("disciplines")
        output_dir.mkdir(exist_ok=True)
        
        # –í–∏—Ö—ñ–¥–Ω–∏–π —Ñ–∞–π–ª –∞–±–æ index.html —É –ø–∞–ø—Ü—ñ disciplines
        output_file = Path(args.output) if args.output else output_dir / "index.html"
        
        generate_index_page(yaml_file, output_file)

    else:
        print("‚ùå –û–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É –∑ –æ–ø—Ü—ñ–π: --discipline, --all, –∞–±–æ --index")
        print("üí° –ü—Ä–∏–∫–ª–∞–¥–∏:")
        print("  python script.py data.yaml -d '–ü–û 01'")
        print("  python script.py data.yaml --all")
        print("  python script.py data.yaml --index")
        print("  python script.py data.yaml --all --template custom_template.html")

if __name__ == "__main__":
    main()
