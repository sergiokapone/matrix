def interactive_fill_mappings(yaml_file="curriculum.yaml"):
    """
    –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–µ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç–µ–π –º—ñ–∂ –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω–∞–º–∏ —ñ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü—ñ—è–º–∏/—Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    """
    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
    with open(yaml_file, "r", encoding="utf-8") as f:
        config = yaml.safe_load(f)

    disciplines = config["disciplines"]
    competencies = config["competencies"]
    program_results = config["program_results"]
    mappings = config.get("mappings", {})

    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –Ω–µ–∑–∞–ø–æ–≤–Ω–µ–Ω—ñ –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω–∏
    unfilled = [code for code in disciplines.keys() if code not in mappings]

    if not unfilled:
        print("üéâ –í—Å—ñ –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω–∏ –≤–∂–µ –∑–∞–ø–æ–≤–Ω–µ–Ω—ñ!")
        return

    print(f"üìù –ó–Ω–∞–π–¥–µ–Ω–æ {len(unfilled)} –Ω–µ–∑–∞–ø–æ–≤–Ω–µ–Ω–∏—Ö –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω")
    print("=" * 60)

    for i, disc_code in enumerate(unfilled):
        print(f"\n[{i + 1}/{len(unfilled)}] {disc_code}: {disciplines[disc_code]}")
        print("-" * 50)

        # –ü–æ–∫–∞–∑—É—î–º–æ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü—ñ—ó
        print("\nüéØ –ö–û–ú–ü–ï–¢–ï–ù–¶–Ü–á:")
        comp_list = list(competencies.keys())
        for j, comp_code in enumerate(comp_list):
            print(f"{j + 1:2d}. {comp_code}: {competencies[comp_code][:60]}...")

        # –í–∏–±—ñ—Ä –∫–æ–º–ø–µ—Ç–µ–Ω—Ü—ñ–π
        print("\n–í–∏–±–µ—Ä—ñ—Ç—å –∫–æ–º–ø–µ—Ç–µ–Ω—Ü—ñ—ó (–Ω–æ–º–µ—Ä–∏ —á–µ—Ä–µ–∑ –∫–æ–º—É, –∞–±–æ Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫—É):")
        comp_input = input("–ö–æ–º–ø–µ—Ç–µ–Ω—Ü—ñ—ó: ").strip()
        selected_comps = []

        if comp_input:
            try:
                indices = [int(x.strip()) - 1 for x in comp_input.split(",")]
                selected_comps = [
                    comp_list[i] for i in indices if 0 <= i < len(comp_list)
                ]
                print(f"‚úÖ –û–±—Ä–∞–Ω–æ: {', '.join(selected_comps)}")
            except:
                print("‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤–≤—ñ–¥, –ø—Ä–æ–ø—É—Å–∫–∞—é –∫–æ–º–ø–µ—Ç–µ–Ω—Ü—ñ—ó")

        # –ü–æ–∫–∞–∑—É—î–º–æ –ø—Ä–æ–≥—Ä–∞–º–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
        print("\nüéØ –ü–†–û–ì–†–ê–ú–ù–Ü –†–ï–ó–£–õ–¨–¢–ê–¢–ò:")
        prog_list = list(program_results.keys())
        for j, prog_code in enumerate(prog_list):
            print(f"{j + 1:2d}. {prog_code}: {program_results[prog_code][:60]}...")

        # –í–∏–±—ñ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        print(
            "\n–í–∏–±–µ—Ä—ñ—Ç—å –ø—Ä–æ–≥—Ä–∞–º–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ (–Ω–æ–º–µ—Ä–∏ —á–µ—Ä–µ–∑ –∫–æ–º—É, –∞–±–æ Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫—É):"
        )
        prog_input = input("–†–µ–∑—É–ª—å—Ç–∞—Ç–∏: ").strip()
        selected_progs = []

        if prog_input:
            try:
                indices = [int(x.strip()) - 1 for x in prog_input.split(",")]
                selected_progs = [
                    prog_list[i] for i in indices if 0 <= i < len(prog_list)
                ]
                print(f"‚úÖ –û–±—Ä–∞–Ω–æ: {', '.join(selected_progs)}")
            except:
                print("‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤–≤—ñ–¥, –ø—Ä–æ–ø—É—Å–∫–∞—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏")

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–∏–±—ñ—Ä
        mappings[disc_code] = {
            "competencies": selected_comps,
            "program_results": selected_progs,
        }

        # –ê–≤—Ç–æ–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
        config["mappings"] = mappings
        with open(yaml_file, "w", encoding="utf-8") as f:
            yaml.dump(
                config,
                f,
                allow_unicode=True,
                default_flow_style=False,
                indent=2,
                sort_keys=False,
            )

        print(f"üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–æ {disc_code}")

        # –ü–∏—Ç–∞—î–º–æ —á–∏ –ø—Ä–æ–¥–æ–≤–∂—É–≤–∞—Ç–∏
        if i < len(unfilled) - 1:
            cont = input("\n–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏? (Enter - —Ç–∞–∫, q - –≤–∏—Ö—ñ–¥): ").strip().lower()
            if cont == "q":
                break

    print(f"\nüéâ –ó–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ó–∞–ø–æ–≤–Ω–µ–Ω–æ {len(mappings)} –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω")
