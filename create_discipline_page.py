import shutil
import os
import sys
from pathlib import Path
from jinja2 import Environment, FileSystemLoader
from slugify import slugify
from dotenv import load_dotenv
from slugify import slugify
import yaml

from core.yaml_handler import load_yaml_data
from core.wp_uploader import update_wordpress_page
from core.path_validator import validate_paths

from index_parser.index_parse import parse_index_links


YAML_LECTURERS = Path("data") / "lecturers.yaml"


def get_mapped_competencies(discipline_code, mappings, all_competencies):
    """–û—Ç—Ä–∏–º—É—î –∫–æ–º–ø–µ—Ç–µ–Ω—Ü—ñ—ó –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω–∏ —Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ –Ω–∞ –∑–∞–≥–∞–ª—å–Ω—ñ —Ç–∞ —Ñ–∞—Ö–æ–≤—ñ"""
    if discipline_code not in mappings:
        return [], []

    mapped_comps = mappings[discipline_code].get("competencies", [])

    general_competencies = []
    professional_competencies = []

    for comp_code in mapped_comps:
        if comp_code in all_competencies:
            comp_desc = all_competencies[comp_code]
            if comp_code.startswith("–ó–ö"):
                general_competencies.append((comp_code, comp_desc))
            elif comp_code.startswith("–§–ö"):
                professional_competencies.append((comp_code, comp_desc))

    return general_competencies, professional_competencies


def get_mapped_program_results(discipline_code, mappings, all_program_results):
    """–û—Ç—Ä–∏–º—É—î –ø—Ä–æ–≥—Ä–∞–º–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω–∏"""
    if discipline_code not in mappings:
        return []

    mapped_results = mappings[discipline_code].get("program_results", [])

    program_results = []
    for prn_code in mapped_results:
        if prn_code in all_program_results:
            program_results.append((prn_code, all_program_results[prn_code]))

    return program_results


def load_discipline_data(yaml_file, discipline_code):
    """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –¥–∞–Ω—ñ –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω–∏ —Ç–∞ –ª–µ–∫—Ç–æ—Ä—ñ–≤"""
    data = load_yaml_data(yaml_file)
    lecturers = load_yaml_data(YAML_LECTURERS)

    all_disciplines = data["disciplines"]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ–º –≤—ã–±–æ—Ä–æ—á–Ω—ã–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã
    if "elevative_disciplines" in data:
        all_disciplines.update(data["elevative_disciplines"])

    # all_disciplines = {**data["disciplines"], **data["elevative_disciplines"]}

    if discipline_code not in all_disciplines:
        print(f"‚ùå –î–∏—Å—Ü–∏–ø–ª—ñ–Ω–∞ {discipline_code} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞!")
        return None, None, None

    # –®—É–∫–∞—î–º–æ –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω—É –≤ –æ–±–æ—Ö —Å–ª–æ–≤–Ω–∏–∫–∞—Ö
    discipline = all_disciplines[discipline_code]

    # –†–æ–∑–≥–æ—Ä—Ç–∞—î–º–æ lecturer_id –≤ –ø–æ–≤–Ω—ñ –¥–∞–Ω—ñ –ª–µ–∫—Ç–æ—Ä–∞
    if "lecturer_id" in discipline:
        lecturer_id = discipline["lecturer_id"]
        discipline["lecturer"] = lecturers.get(lecturer_id)

    return data, discipline, lecturers


def prepare_discipline_context(discipline_code, discipline, data):
    """–ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –¥–ª—è —à–∞–±–ª–æ–Ω—É –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω–∏"""
    metadata = data.get("metadata", {})

    general_comps, professional_comps = get_mapped_competencies(
        discipline_code, data.get("mappings", {}), data.get("competencies", {})
    )
    program_results = get_mapped_program_results(
        discipline_code, data.get("mappings", {}), data.get("program_results", {})
    )

    return {
        "discipline_code": discipline_code,
        "discipline": discipline,
        "metadata": metadata,
        "general_competencies": general_comps,
        "professional_competencies": professional_comps,
        "mapped_program_results": program_results,
    }


def get_jinja_environment():
    """–°—Ç–≤–æ—Ä—é—î Jinja2 Environment –∑ —à–∞–±–ª–æ–Ω–∞–º–∏"""
    templates_dir = os.path.join(os.path.dirname(__file__), "templates")
    return Environment(loader=FileSystemLoader(templates_dir), autoescape=True)


def render_template(template_file, context):
    """–†–µ–Ω–¥–µ—Ä–∏—Ç—å HTML —á–µ—Ä–µ–∑ Jinja2 —à–∞–±–ª–æ–Ω"""
    env = get_jinja_environment()
    template = env.get_template(template_file)
    return template.render(context)


def save_html_file(content, output_file):
    """–ó–±–µ—Ä—ñ–≥–∞—î HTML –∫–æ–Ω—Ç–µ–Ω—Ç —É —Ñ–∞–π–ª"""
    with open(output_file, "w", encoding="utf-8") as f:
        f.write(content)


def get_safe_filename(discipline_code):
    """–°—Ç–≤–æ—Ä—é—î –±–µ–∑–ø–µ—á–Ω–µ —ñ–º'—è —Ñ–∞–π–ª—É –∑ –∫–æ–¥—É –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω–∏"""
    return discipline_code.replace(" ", "_").replace("/", "_")


def generate_discipline_page(
    yaml_file,
    discipline_code,
    output_file=None,
    template_file="discipline_template.html",
):
    """–ì–µ–Ω–µ—Ä—É—î HTML —Å—Ç–æ—Ä—ñ–Ω–∫—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω–∏ —á–µ—Ä–µ–∑ Jinja2 —à–∞–±–ª–æ–Ω"""

    data, discipline, lecturers = load_discipline_data(yaml_file, discipline_code)
    if data is None:
        return False

    context = prepare_discipline_context(discipline_code, discipline, data)
    html_content = render_template(template_file, context)

    if not output_file:
        safe_name = get_safe_filename(discipline_code)
        output_file = f"discipline_{safe_name}.html"

    save_html_file(html_content, output_file)
    print(f"‚úÖ –°—Ç–æ—Ä—ñ–Ω–∫–∞ –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω–∏ —Å—Ç–≤–æ—Ä–µ–Ω–∞: {output_file}")
    return True


def create_output_directory(output_dir):
    """–°—Ç–≤–æ—Ä—é—î –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –¥–ª—è –≤–∏–≤–æ–¥—É"""
    output_path = Path(output_dir)
    output_path.mkdir(exist_ok=True)
    return output_path


def generate_all_disciplines(
    yaml_file, output_dir="disciplines", template_file="discipline_template.html"
):
    """–ì–µ–Ω–µ—Ä—É—î —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –¥–ª—è –≤—Å—ñ—Ö –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω"""

    data = load_yaml_data(yaml_file)
    output_path = create_output_directory(output_dir)
    disciplines = data.get("disciplines", {}) | data.get("elevative_disciplines", {})

    print(f"üöÄ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Å—Ç–æ—Ä—ñ–Ω–æ–∫ –¥–ª—è {len(disciplines)} –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω...")
    print(f"üìÑ –®–∞–±–ª–æ–Ω: {template_file}")

    success_count = 0
    for discipline_code in disciplines.keys():
        safe_name = get_safe_filename(discipline_code)
        output_file = output_path / f"{safe_name}.html"

        if generate_discipline_page(yaml_file, discipline_code, output_file, template_file):
            success_count += 1

    print(f"‚úÖ –£—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ {success_count} —Å—Ç–æ—Ä—ñ–Ω–æ–∫ —É –ø–∞–ø—Ü—ñ {output_dir}")


def calculate_subdiscipline_totals(discipline):
    """–†–æ–∑—Ä–∞—Ö–æ–≤—É—î –∑–∞–≥–∞–ª—å–Ω—ñ –∫—Ä–µ–¥–∏—Ç–∏ —Ç–∞ —Ñ–æ—Ä–º–∏ –∫–æ–Ω—Ç—Ä–æ–ª—é –¥–ª—è –ø—ñ–¥–¥–∏—Å—Ü–∏–ø–ª—ñ–Ω"""
    if "subdisciplines" not in discipline or not discipline["subdisciplines"]:
        return discipline.get("credits", 0), discipline.get("control", "")

    total_credits = sum(
        sub.get("credits", 0) for sub in discipline["subdisciplines"].values()
    )

    controls = list(
        {
            sub.get("control")
            for sub in discipline["subdisciplines"].values()
            if sub.get("control")
        }
    )

    return total_credits, ", ".join(controls)


def prepare_disciplines_with_totals(disciplines):
    """–ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω –∑ —Ä–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–∏–º–∏ –ø—ñ–¥—Å—É–º–∫–∞–º–∏"""
    for _, discipline in disciplines.items():
        total_credits, all_controls = calculate_subdiscipline_totals(discipline)
        discipline["total_credits"] = total_credits
        discipline["all_controls"] = all_controls

    return disciplines


def generate_index_page(yaml_file, output_file="index.html"):
    """–ì–µ–Ω–µ—Ä—É—î —ñ–Ω–¥–µ–∫—Å–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É –∑—ñ —Å–ø–∏—Å–∫–æ–º –≤—Å—ñ—Ö –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω —á–µ—Ä–µ–∑ Jinja2 —à–∞–±–ª–æ–Ω"""

    data = load_yaml_data(yaml_file)
    metadata = data.get("metadata", {})
    disciplines = data.get("disciplines", {}) | data.get("elevative_disciplines", {})

    disciplines = prepare_disciplines_with_totals(disciplines)

    context = {
        "metadata": metadata,
        "disciplines": disciplines
    }

    html_content = render_template("index_template.html", context)
    save_html_file(html_content, output_file)

    print(f"üìã –Ü–Ω–¥–µ–∫—Å–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–∞: {output_file}")


def validate_yaml_file(yaml_file):
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —ñ—Å–Ω—É–≤–∞–Ω–Ω—è YAML —Ñ–∞–π–ª—É"""
    if not Path(yaml_file).exists():
        print(f"‚ùå YAML —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {yaml_file}")
        return False
    return True


def clean_output_directory(output_dir='disciplines'):
    """–í–∏–¥–∞–ª—è—î –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –∑ —É—Å—ñ–º –≤–º—ñ—Å—Ç–æ–º"""
    if os.path.exists(output_dir):
        shutil.rmtree(output_dir)


def handle_single_discipline(yaml_file, discipline_code, template):
    """–û–±—Ä–æ–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –æ–¥–Ω—ñ—î—ó –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω–∏"""
    output_dir = create_output_directory("disciplines")
    safe_name = get_safe_filename(discipline_code)
    output_file = output_dir / f"{safe_name}.html"
    generate_discipline_page(yaml_file, discipline_code, output_file, template)


def handle_all_disciplines(yaml_file, clean=False):
    """–û–±—Ä–æ–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≤—Å—ñ—Ö –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω"""

    output_dir = create_output_directory("disciplines")
    if clean:
        clean_output_directory(output_dir)

    generate_all_disciplines(yaml_file, output_dir)


def handle_index_generation(yaml_file, output):
    """–û–±—Ä–æ–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —ñ–Ω–¥–µ–∫—Å–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏"""
    output_dir = create_output_directory("disciplines")
    output_file = Path(output) if output else output_dir / "index.html"
    generate_index_page(yaml_file, output_file)


# === WordPress Upload Functions ===

def get_parent_id(yaml_data):
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è PARENT_ID –∑ YAML"""
    try:
        return yaml_data['metadata']['page_id']
    except KeyError:
        print("‚ùå –£ YAML –Ω–µ–º–∞—î –∫–ª—é—á–∞ 'page_id' —É metadata")
        sys.exit(1)


def read_html_file(file_path):
    """–ß–∏—Ç–∞–Ω–Ω—è HTML —Ñ–∞–π–ª—É"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            return f.read()
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è —Ñ–∞–π–ª—É {file_path}: {e}")
        return None


def upload_html_files(disciplines_dir, yaml_data, parent_id):
    """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—Å—ñ—Ö HTML —Ñ–∞–π–ª—ñ–≤ –Ω–∞ WordPress —Ç–∞ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ YAML-—Å—Ç—Ä—É–∫—Ç—É—Ä–∏"""
    wp_links = {}
    
    # –û–±'—î–¥–Ω—É—î–º–æ –æ–±–∏–¥–≤–∞ —Å–ª–æ–≤–Ω–∏–∫–∏ –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω
    all_disciplines = {**yaml_data['disciplines'], **yaml_data.get('elevative_disciplines', {})}

    for html_file in disciplines_dir.glob("*.html"):
        if html_file.name.lower() == "index.html":
            continue

        discipline_code = html_file.stem.replace('_', ' ')
        discipline_info = all_disciplines.get(discipline_code)

        if not discipline_info:
            print(f"‚ùå –î–∏—Å—Ü–∏–ø–ª—ñ–Ω–∞ {discipline_code} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –≤ YAML, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ...")
            continue

        content = read_html_file(html_file)
        if content is None:
            continue

        title = f"{discipline_code}: {discipline_info['name']}"
        slug = slugify(title)

        success, link, message = update_wordpress_page(
            content=content,
            slug=slug,
            data={
                'title': title,
                'slug': slug,
                'parent': parent_id,
                'status': 'publish'
            }
        )

        if success:
            print(f"{message}: {title} ‚Üí {link}")
            wp_links[discipline_code] = link
        else:
            print(f"‚ùå {title}: {message}")

    # –°–æ–±–∏—Ä–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ YAML
    metadata = {
        "year": yaml_data.get("metadata", {}).get("year", ""),
        "degree": yaml_data.get("metadata", {}).get("degree", "")
    }

    wp_data = {
        "year": metadata["year"],
        "degree": metadata["degree"],
        "links": wp_links
    }

    return wp_data

def print_upload_summary(wp_links):
    """–í–∏–≤–µ–¥–µ–Ω–Ω—è –ø—ñ–¥—Å—É–º–∫–æ–≤–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è"""
    print("-" * 60)
    print("üìã –ü—ñ–¥—Å—É–º–æ–∫ - –≤—Å—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è:")
    for code, link in sorted(wp_links.items()):
        print(f'    "{code}": "{link}",')
    print("-" * 60)


def save_wp_links_yaml(wp_data, output_file="wp_links.yaml"):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç WP —Å—Å—ã–ª–∫–∏ + –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ YAML"""
    output_path = Path(output_file)
    with open(output_path, "w", encoding="utf-8") as f:
        yaml.dump(wp_data, f, allow_unicode=True)
    print(f"üìã WP —Å—Å—ã–ª–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {output_file}")


def handle_upload(yaml_file, disciplines_dir, check_dir=True):
    """–û–±—Ä–æ–±–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞ WordPress"""
    load_dotenv()

    disciplines_path = Path(disciplines_dir)

    if check_dir and not disciplines_path.exists():
        print(f"‚ùå –ü–∞–ø–∫–∞ {disciplines_dir} –Ω–µ —ñ—Å–Ω—É—î! –°–ø–æ—á–∞—Ç–∫—É –∑–≥–µ–Ω–µ—Ä—É–π—Ç–µ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é --all")
        return

    yaml_data = load_yaml_data(yaml_file)
    parent_id = get_parent_id(yaml_data)

    print("-" * 60)
    print("üöÄ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞ WordPress...")
    print("-" * 60)

    wp_data = upload_html_files(disciplines_path, yaml_data, parent_id)

    yaml_name = Path(yaml_file).stem

    save_wp_links_yaml(wp_data, f"wp_links_{yaml_name}.yaml")


# def handle_upload_only(yaml_file, args): 
#     """–¢–æ–ª—å–∫–æ –∑–∞–≥—Ä—É–∑–∫–∞ –≤ WP (–±–µ–∑ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏)""" 
#     output_dir = args.output if args.output else "disciplines" 
#     disciplines_dir = Path(output_dir) 
#     if not disciplines_dir.exists(): 
#         print(f"‚ùå –ü–∞–ø–∫–∞ {output_dir} –Ω–µ —ñ—Å–Ω—É—î! –°–ø–æ—á–∞—Ç–∫—É –∑–≥–µ–Ω–µ—Ä—É–π—Ç–µ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é --all") 
#         return

def get_index_slug(yaml_file):
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç slug –¥–ª—è index —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ year –∏ degree"""
    try:
        year = yaml_file['metadata']['year']
        degree = yaml_file['metadata']['degree']
    except KeyError as e:
        print(f"‚ùå –í YAML –Ω–µ—Ç –∫–ª—é—á–∞ {e} –≤ metadata –¥–ª—è index slug")
        sys.exit(1)

    # –ª–∞—Ç–∏–Ω–∏–∑–∞—Ü–∏—è –∏ lower

    slug = slugify(f"op_{degree}-{year}")
    return slug


def upload_index_page(yaml_data, index_file):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ index.html –Ω–∞ WordPress –ø–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É ID"""
    content = read_html_file(index_file)
    if content is None:
        return

    page_id = yaml_data['metadata'].get('page_id')
    if not page_id:
        print("‚ùå –í YAML –Ω–µ—Ç –∫–ª—é—á–∞ 'page_id' –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã index")
        return

    slug = get_index_slug(yaml_data)
    title = f"–û—Å–≤—ñ—Ç–Ω—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏: {yaml_data['metadata'].get('degree', '')} {yaml_data['metadata'].get('year', '')}"

    success, link, message = update_wordpress_page(
        content=content,
        slug=slug,
        data={
            'title': title,
            'slug': slug,
            'parent': 16,
            'status': 'publish'
        },
        page_id=page_id  # –æ–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    )

    if success:
        print(f"‚úÖ Index –æ–±–Ω–æ–≤–ª–µ–Ω: {title} ‚Üí {link}")
        return link
    else:
        print(f"‚ùå Index: {message}")
        return None


def handle_upload_index(yaml_file, output_dir=None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ index.html"""
    yaml_data = load_yaml_data(yaml_file)

    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–∞–ø–∫–∞ –≤—ã–≤–æ–¥–∞
    output_dir = Path(output_dir) if output_dir else Path("disciplines")
    index_file = output_dir / "index.html"

    if not index_file.exists():
        print(f"‚ùå –§–∞–π–ª {index_file} –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–Ω–∞—á–∞–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –µ–≥–æ —Å --index")
        return

    upload_index_page(yaml_data, index_file)


def handle_parse_index(yaml_file, output_dir=None):
    """
    –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è CLI: –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é parse_index_links –∏–∑ –º–æ–¥—É–ª—è.
    
    yaml_file: –ø—É—Ç—å –∫ YAML (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
    output_dir: –ø–∞–ø–∫–∞ —Å index.html, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'disciplines'
    """

    output_dir = Path(output_dir) if output_dir else Path("disciplines")
    index_file = output_dir / "index.html"
    parse_index_links(index_file, data_yaml=yaml_file)


def print_usage_examples():
    """–í–∏–≤–æ–¥–∏—Ç—å –ø—Ä–∏–∫–ª–∞–¥–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è CLI –∑ —É—Å—ñ–º–∞ –¥–æ—Å—Ç—É–ø–Ω–∏–º–∏ –æ–ø—Ü—ñ—è–º–∏"""
    print("‚ùå –û–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É –∑ –æ–ø—Ü—ñ–π: --discipline, --all, --index, --parse-index, --upload, --upload-index")
    print("üí° –ü—Ä–∏–∫–ª–∞–¥–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:")
    print("  python create_discipline_page.py data.yaml -d '–ü–û 01'                # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –æ–¥–Ω—ñ—î—ó –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω–∏")
    print("  python create_discipline_page.py data.yaml --all                     # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≤—Å—ñ—Ö –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω")
    print("  python create_discipline_page.py data.yaml --all --upload            # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—Å—ñ—Ö –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω –Ω–∞ WP")
    print("  python create_discipline_page.py data.yaml --upload                  # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤–∂–µ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏—Ö —Å—Ç–æ—Ä—ñ–Ω–æ–∫")
    print("  python create_discipline_page.py data.yaml --index                   # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —ñ–Ω–¥–µ–∫—Å–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏")
    print("  python create_discipline_page.py data.yaml --parse-index             # –ü—ñ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ WP –ø–æ—Å–∏–ª–∞–Ω—å —É index.html")
    print("  python create_discipline_page.py data.yaml --upload-index            # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è index.html –Ω–∞ WP")
    print("  python create_discipline_page.py data.yaml --index --parse-index --upload-index")
    print("      # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —ñ–Ω–¥–µ–∫—Å—É, –ø—ñ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Å–∏–ª–∞–Ω—å —ñ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞ WP")
    print("  python create_discipline_page.py data.yaml --all --template custom_template.html")



def parse_arguments():
    """–ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ —Ä—è–¥–∫–∞"""
    import argparse

    parser = argparse.ArgumentParser(
        description="–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å—Ç–æ—Ä—ñ–Ω–æ–∫ –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω –¥–ª—è WordPress"
    )
    parser.add_argument("yaml_file", help="–®–ª—è—Ö –¥–æ YAML —Ñ–∞–π–ª—É –∑ –¥–∞–Ω–∏–º–∏")
    parser.add_argument(
        "--discipline", "-d", help="–ö–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó"
    )

    parser.add_argument("--upload-index", "-ui", action="store_true", help="–ó–∞–≥—Ä—É–∑–∏—Ç—å index.html –Ω–∞ WordPress")

    parser.add_argument(
        "--template",
        "-t",
        default="discipline_template.html",
        help="–§–∞–π–ª —à–∞–±–ª–æ–Ω—É –≤ –ø–∞–ø—Ü—ñ templates/",
    )
    parser.add_argument(
        "--all",
        "-a",
        action="store_true",
        help="–ì–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –¥–ª—è –≤—Å—ñ—Ö –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω",
    )
    parser.add_argument(
        "--index", "-i", action="store_true", help="–°—Ç–≤–æ—Ä–∏—Ç–∏ —ñ–Ω–¥–µ–∫—Å–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É"
    )
    parser.add_argument("--output", "-o", help="–í–∏—Ö—ñ–¥–Ω–∏–π —Ñ–∞–π–ª –∞–±–æ –ø–∞–ø–∫–∞")
    parser.add_argument(
        "--clean", "-c", action="store_true", help="–û—á–∏—Å—Ç–∏—Ç–∏ –∫–∞—Ç–∞–ª–æ–≥ –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—î—é"
    )
    parser.add_argument(
        "--upload", "-u", action="store_true",
        help="–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –Ω–∞ WordPress"
    )

    parser.add_argument(
        "--parse-index", "-pi", action="store_true", help="–ü—ñ–¥—Å—Ç–∞–≤–∏—Ç–∏ –≤ —Ñ–∞–π–ª index.html –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Å–∞–π—Ç"
    )


    return parser.parse_args()


def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑ CLI —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º"""
    args = parse_arguments()
    yaml_file = Path("data") / args.yaml_file

    if not validate_yaml_file(yaml_file):
        return

    # –°–ª–æ–≤–Ω–∏–∫ –¥—ñ–π CLI
    cli_actions = {
        'clean': lambda: clean_output_directory(),
        'discipline': lambda: handle_single_discipline(yaml_file, args.discipline, args.template),
        'all': lambda: handle_all_disciplines(yaml_file, args),
        'upload': lambda: handle_upload(yaml_file, args.output or "disciplines", check_dir=True),
        'index': lambda: handle_index_generation(yaml_file, args.output),
        'parse_index': lambda: handle_parse_index(yaml_file, args.output),
        'upload_index': lambda: handle_upload_index(yaml_file, args.output),

    }

    # –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç –∫–æ–º–∞–Ω–¥
    executed = False
    for action_name in cli_actions.keys():
        if getattr(args, action_name, False):
            cli_actions[action_name]()
            executed = True

    # –Ø–∫—â–æ –∂–æ–¥–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –≤–∫–∞–∑–∞–Ω–∞
    if not executed:
        print_usage_examples()


if __name__ == "__main__":
    main()
