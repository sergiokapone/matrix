import pandas as pd
import yaml
import webbrowser
import argparse
import sys

from pathlib import Path
from datetime import datetime


def generate_matrices_from_yaml(
    yaml_file="curriculum.yaml", output_file="matrices.xlsx"
):
    """
    –ì–µ–Ω–µ—Ä—É—î Excel —Ñ–∞–π–ª –∑ –º–∞—Ç—Ä–∏—Ü—è–º–∏ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü—ñ–π —Ç–∞ –ø—Ä–æ–≥—Ä–∞–º–Ω–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –Ω–∞ –æ—Å–Ω–æ–≤—ñ YAML –∫–æ–Ω—Ñ—ñ–≥—É
    """

    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ YAML
    with open(yaml_file, "r", encoding="utf-8") as f:
        config = yaml.safe_load(f)

    metadata = config.get("metadata", {})
    disciplines = config["disciplines"]
    competencies = config["competencies"]
    program_results = config["program_results"]
    mappings = config["mappings"]

    # === –ú–ê–¢–†–ò–¶–Ø –ö–û–ú–ü–ï–¢–ï–ù–¶–Ü–ô ===
    comp_df = pd.DataFrame(
        "", index=list(competencies.keys()), columns=list(disciplines.keys())
    )

    # === –ú–ê–¢–†–ò–¶–Ø –ü–†–û–ì–†–ê–ú–ù–ò–• –†–ï–ó–£–õ–¨–¢–ê–¢–Ü–í ===
    prog_df = pd.DataFrame(
        "", index=list(program_results.keys()), columns=list(disciplines.keys())
    )

    # –ó–∞–ø–æ–≤–Ω—é—î–º–æ –º–∞—Ç—Ä–∏—Ü—ñ –Ω–∞ –æ—Å–Ω–æ–≤—ñ mappings
    for discipline_code, mapping in mappings.items():
        if discipline_code in disciplines:
            # –ö–æ–º–ø–µ—Ç–µ–Ω—Ü—ñ—ó
            for comp_code in mapping.get("competencies", []):
                if comp_code in comp_df.index:
                    comp_df.at[comp_code, discipline_code] = "+"

            # –ü—Ä–æ–≥—Ä–∞–º–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
            for prog_code in mapping.get("program_results", []):
                if prog_code in prog_df.index:
                    prog_df.at[prog_code, discipline_code] = "+"

    # –°—Ç–≤–æ—Ä—é—î–º–æ –±–∞–≥–∞—Ç–æ—Ä—ñ–≤–Ω–µ–≤—ñ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫–æ–ª–æ–Ω–æ–∫
    comp_columns = pd.MultiIndex.from_tuples(
        [(disciplines[code], code) for code in comp_df.columns],
        names=["–î–∏—Å—Ü–∏–ø–ª—ñ–Ω–∞", "–ö–æ–¥"],
    )

    prog_columns = pd.MultiIndex.from_tuples(
        [(disciplines[code], code) for code in prog_df.columns],
        names=["–î–∏—Å—Ü–∏–ø–ª—ñ–Ω–∞", "–ö–æ–¥"],
    )

    comp_df.columns = comp_columns
    prog_df.columns = prog_columns

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –æ–¥–∏–Ω Excel —Ñ–∞–π–ª –∑ —Ç—Ä—å–æ–º–∞ –ª–∏—Å—Ç–∞–º–∏
    with pd.ExcelWriter(output_file, engine="openpyxl") as writer:
        comp_df.to_excel(writer, sheet_name="–ö–æ–º–ø–µ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—ñ")
        prog_df.to_excel(writer, sheet_name="–ü—Ä–æ–≥—Ä–∞–º–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏")

        # === –ó–í–ï–î–ï–ù–ê –¢–ê–ë–õ–ò–¶–Ø ===
        summary_data = []
        for disc_code, disc_name in disciplines.items():
            mapping = mappings.get(disc_code, {})
            comps = mapping.get("competencies", [])
            progs = mapping.get("program_results", [])

            summary_data.append(
                {
                    "–ö–æ–¥": disc_code,
                    "–î–∏—Å—Ü–∏–ø–ª—ñ–Ω–∞": disc_name,
                    "–ö–æ–º–ø–µ—Ç–µ–Ω—Ü—ñ—ó": ", ".join(comps) if comps else "",
                    "–ü—Ä–æ–≥—Ä–∞–º–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏": ", ".join(progs) if progs else "",
                    "–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–º–ø–µ—Ç–µ–Ω—Ü—ñ–π": len(comps),
                    "–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ü–†–ù": len(progs),
                }
            )

        summary_df = pd.DataFrame(summary_data)
        summary_df.to_excel(writer, sheet_name="–ó–≤–µ–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü—è", index=False)

        # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –∑–≤–µ–¥–µ–Ω–æ—ó —Ç–∞–±–ª–∏—Ü—ñ
        worksheet = writer.sheets["–ó–≤–µ–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü—è"]
        worksheet.column_dimensions["A"].width = 10  # –ö–æ–¥
        worksheet.column_dimensions["B"].width = 50  # –î–∏—Å—Ü–∏–ø–ª—ñ–Ω–∞
        worksheet.column_dimensions["C"].width = 40  # –ö–æ–º–ø–µ—Ç–µ–Ω—Ü—ñ—ó
        worksheet.column_dimensions["D"].width = 40  # –ü—Ä–æ–≥—Ä–∞–º–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
        worksheet.column_dimensions["E"].width = 15  # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–º–ø–µ—Ç–µ–Ω—Ü—ñ–π
        worksheet.column_dimensions["F"].width = 15  # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ü–†–ù

    print(f"‚úÖ –ú–∞—Ç—Ä–∏—Ü—ñ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ: {output_file}")
    print(f"üìä –ö–æ–º–ø–µ—Ç–µ–Ω—Ü—ñ—ó: {len(competencies)} x {len(disciplines)}")
    print(f"üìä –ü—Ä–æ–≥—Ä–∞–º–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏: {len(program_results)} x {len(disciplines)}")
    print(f"üìã –ó–≤–µ–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü—è: {len(disciplines)} –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω")


def interactive_fill_mappings(yaml_file="curriculum.yaml"):
    """
    –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–µ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç–µ–π –º—ñ–∂ –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω–∞–º–∏ —ñ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü—ñ—è–º–∏/—Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    """
    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
    with open(yaml_file, "r", encoding="utf-8") as f:
        config = yaml.safe_load(f)

    disciplines = config["disciplines"]
    competencies = config["competencies"]
    program_results = config["program_results"]
    mappings = config.get("mappings", {})

    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –Ω–µ–∑–∞–ø–æ–≤–Ω–µ–Ω—ñ –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω–∏
    unfilled = [code for code in disciplines.keys() if code not in mappings]

    if not unfilled:
        print("üéâ –í—Å—ñ –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω–∏ –≤–∂–µ –∑–∞–ø–æ–≤–Ω–µ–Ω—ñ!")
        return

    print(f"üìù –ó–Ω–∞–π–¥–µ–Ω–æ {len(unfilled)} –Ω–µ–∑–∞–ø–æ–≤–Ω–µ–Ω–∏—Ö –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω")
    print("=" * 60)

    for i, disc_code in enumerate(unfilled):
        print(f"\n[{i + 1}/{len(unfilled)}] {disc_code}: {disciplines[disc_code]}")
        print("-" * 50)

        # –ü–æ–∫–∞–∑—É—î–º–æ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü—ñ—ó
        print("\nüéØ –ö–û–ú–ü–ï–¢–ï–ù–¶–Ü–á:")
        comp_list = list(competencies.keys())
        for j, comp_code in enumerate(comp_list):
            print(f"{j + 1:2d}. {comp_code}: {competencies[comp_code][:60]}...")

        # –í–∏–±—ñ—Ä –∫–æ–º–ø–µ—Ç–µ–Ω—Ü—ñ–π
        print("\n–í–∏–±–µ—Ä—ñ—Ç—å –∫–æ–º–ø–µ—Ç–µ–Ω—Ü—ñ—ó (–Ω–æ–º–µ—Ä–∏ —á–µ—Ä–µ–∑ –∫–æ–º—É, –∞–±–æ Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫—É):")
        comp_input = input("–ö–æ–º–ø–µ—Ç–µ–Ω—Ü—ñ—ó: ").strip()
        selected_comps = []

        if comp_input:
            try:
                indices = [int(x.strip()) - 1 for x in comp_input.split(",")]
                selected_comps = [
                    comp_list[i] for i in indices if 0 <= i < len(comp_list)
                ]
                print(f"‚úÖ –û–±—Ä–∞–Ω–æ: {', '.join(selected_comps)}")
            except:
                print("‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤–≤—ñ–¥, –ø—Ä–æ–ø—É—Å–∫–∞—é –∫–æ–º–ø–µ—Ç–µ–Ω—Ü—ñ—ó")

        # –ü–æ–∫–∞–∑—É—î–º–æ –ø—Ä–æ–≥—Ä–∞–º–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
        print("\nüéØ –ü–†–û–ì–†–ê–ú–ù–Ü –†–ï–ó–£–õ–¨–¢–ê–¢–ò:")
        prog_list = list(program_results.keys())
        for j, prog_code in enumerate(prog_list):
            print(f"{j + 1:2d}. {prog_code}: {program_results[prog_code][:60]}...")

        # –í–∏–±—ñ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        print(
            "\n–í–∏–±–µ—Ä—ñ—Ç—å –ø—Ä–æ–≥—Ä–∞–º–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ (–Ω–æ–º–µ—Ä–∏ —á–µ—Ä–µ–∑ –∫–æ–º—É, –∞–±–æ Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫—É):"
        )
        prog_input = input("–†–µ–∑—É–ª—å—Ç–∞—Ç–∏: ").strip()
        selected_progs = []

        if prog_input:
            try:
                indices = [int(x.strip()) - 1 for x in prog_input.split(",")]
                selected_progs = [
                    prog_list[i] for i in indices if 0 <= i < len(prog_list)
                ]
                print(f"‚úÖ –û–±—Ä–∞–Ω–æ: {', '.join(selected_progs)}")
            except:
                print("‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤–≤—ñ–¥, –ø—Ä–æ–ø—É—Å–∫–∞—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏")

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–∏–±—ñ—Ä
        mappings[disc_code] = {
            "competencies": selected_comps,
            "program_results": selected_progs,
        }

        # –ê–≤—Ç–æ–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
        config["mappings"] = mappings
        with open(yaml_file, "w", encoding="utf-8") as f:
            yaml.dump(
                config,
                f,
                allow_unicode=True,
                default_flow_style=False,
                indent=2,
                sort_keys=False,
            )

        print(f"üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–æ {disc_code}")

        # –ü–∏—Ç–∞—î–º–æ —á–∏ –ø—Ä–æ–¥–æ–≤–∂—É–≤–∞—Ç–∏
        if i < len(unfilled) - 1:
            cont = input("\n–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏? (Enter - —Ç–∞–∫, q - –≤–∏—Ö—ñ–¥): ").strip().lower()
            if cont == "q":
                break

    print(f"\nüéâ –ó–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ó–∞–ø–æ–≤–Ω–µ–Ω–æ {len(mappings)} –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω")


def generate_html_report(yaml_file="curriculum.yaml"):
    """
    –ì–µ–Ω–µ—Ä—É—î HTML –∑–≤—ñ—Ç –∑ –∫–æ–ª—å–æ—Ä–æ–≤–∏–º–∏ —Ç–∞–±–ª–∏—Ü—è–º–∏ —Ç–∞ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–º–∏ –ø—ñ–¥–∫–∞–∑–∫–∞–º–∏
    """
    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ
    with open(yaml_file, 'r', encoding='utf-8') as f:
        config = yaml.safe_load(f)
    
    metadata = config.get("metadata", {})
    disciplines = config["disciplines"]
    competencies = config["competencies"]
    program_results = config["program_results"]
    mappings = config.get("mappings", {})
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ HTML
    html = f"""
    <!DOCTYPE html>
    <html>
    <head>
        <meta charset="utf-8">
        <title>{metadata.get('title', '–ú–∞—Ç—Ä–∏—Ü—ñ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü—ñ–π')} - –ó–≤—ñ—Ç</title>
        <style>
            body {{ font-family: Arial, sans-serif; margin: 20px; }}
            table {{ border-collapse: collapse; margin: 20px 0; }}
            th, td {{ border: 1px solid #ddd; padding: 8px; text-align: center; }}
            th {{ background-color: #f2f2f2; font-weight: bold; }}
            .filled {{ background-color: #d4edda; color: #155724; font-weight: bold; }}
            .empty {{ background-color: #f8f9fa; }}
            .discipline-header {{ background-color: #e9ecef; writing-mode: vertical-rl; text-orientation: mixed; }}
            .stats {{ background-color: #d1e7dd; padding: 15px; margin: 20px 0; border-radius: 5px; }}
            .metadata {{ background-color: #e7f3ff; padding: 15px; margin: 20px 0; border-radius: 5px; border-left: 4px solid #0066cc; }}
            .unfilled {{ color: #721c24; background-color: #f8d7da; padding: 10px; margin: 10px 0; }}
            
            /* –°—Ç–∏–ª—ñ –¥–ª—è –ø—ñ–¥–∫–∞–∑–æ–∫ */
            .tooltip-trigger {{
                position: relative;
                cursor: help;
                color: #0066cc;
                font-weight: bold;
                text-decoration: underline;
                text-decoration-style: dotted;
            }}
            
            .tooltip-trigger:hover {{
                color: #004499;
            }}
            
            .tooltip {{
                position: absolute;
                background: #333;
                color: white;
                padding: 8px 12px;
                border-radius: 6px;
                font-size: 0.85em;
                font-weight: normal;
                max-width: 300px;
                word-wrap: break-word;
                z-index: 1000;
                box-shadow: 0 4px 8px rgba(0,0,0,0.3);
                opacity: 0;
                transform: translateY(-5px);
                transition: all 0.2s ease;
                pointer-events: none;
                white-space: normal;
                line-height: 1.3;
            }}
            
            .tooltip.show {{
                opacity: 1;
                transform: translateY(0);
            }}
            
            .tooltip::after {{
                content: '';
                position: absolute;
                top: 100%;
                left: 50%;
                margin-left: -5px;
                border-width: 5px;
                border-style: solid;
                border-color: #333 transparent transparent transparent;
            }}
        </style>
    </head>
    <body>
        <h1>üìä {metadata.get('title', '–ó–≤—ñ—Ç –ø–æ –º–∞—Ç—Ä–∏—Ü—è—Ö –∫–æ–º–ø–µ—Ç–µ–Ω—Ü—ñ–π')}</h1>
    """
    
    # –ë–ª–æ–∫ –º–µ—Ç–∞–¥–∞–Ω–∏—Ö
    if metadata:
        html += '<div class="metadata">'
        html += '<h3>‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø—Ä–æ–≥—Ä–∞–º—É</h3>'
        
        if metadata.get('university'):
            html += f'<p><strong>–í–ù–ó:</strong> {metadata["university"]}</p>'
        if metadata.get('faculty'):
            html += f'<p><strong>–ü—ñ–¥—Ä–æ–∑–¥—ñ–ª:</strong> {metadata["faculty"]}</p>'
        if metadata.get('department'):
            html += f'<p><strong>–ö–∞—Ñ–µ–¥—Ä–∞:</strong> {metadata["department"]}</p>'
        if metadata.get('specialty'):
            html += f'<p><strong>–°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å:</strong> {metadata["specialty"]}</p>'
        if metadata.get('specialization'):
            html += f'<p><strong>–°–ø–µ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è:</strong> {metadata["specialization"]}</p>'
        if metadata.get('degree'):
            html += f'<p><strong>–û—Å–≤—ñ—Ç–Ω—ñ–π —Ä—ñ–≤–µ–Ω—å:</strong> {metadata["degree"]}</p>'
        if metadata.get('credits_total'):
            html += f'<p><strong>–û–±—Å—è–≥ –ø—Ä–æ–≥—Ä–∞–º–∏:</strong> {metadata["credits_total"]} –∫—Ä–µ–¥–∏—Ç—ñ–≤ –Ñ–ö–¢–°</p>'
        if metadata.get('study_years'):
            html += f'<p><strong>–¢–µ—Ä–º—ñ–Ω –Ω–∞–≤—á–∞–Ω–Ω—è:</strong> {metadata["study_years"]} —Ä–æ–∫–∏</p>'
        if metadata.get('website'):
            html += f'<p><strong>–°–∞–π—Ç:</strong> <a href="{metadata["website"]}" target="_blank">{metadata["website"]}</a></p>'
        if metadata.get('version'):
            html += f'<p><strong>–í–µ—Ä—Å—ñ—è –º–∞—Ç—Ä–∏—Ü—ñ:</strong> {metadata["version"]}</p>'
        if metadata.get('last_updated'):
            html += f'<p><strong>–û—Å—Ç–∞–Ω–Ω—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è:</strong> {metadata["last_updated"]}</p>'
        
        contacts = metadata.get('contacts', {})
        if contacts:
            html += '<p><strong>–ö–æ–Ω—Ç–∞–∫—Ç–∏:</strong> '
            contact_info = []
            if contacts.get('email'):
                contact_info.append(f'üìß {contacts["email"]}')
            if contacts.get('phone'):
                contact_info.append(f'üìû {contacts["phone"]}')
            html += ', '.join(contact_info) + '</p>'
        
        html += '</div>'
    
    html += f'<p><strong>–ó–≤—ñ—Ç –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ:</strong> {datetime.now().strftime("%d.%m.%Y –æ %H:%M")}</p>'
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    unfilled_disciplines = [code for code in disciplines.keys() if code not in mappings]
    
    html += f"""
    <div class="stats">
        <h3>üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3>
        <p><strong>–í—Å—å–æ–≥–æ –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω:</strong> {len(disciplines)}</p>
        <p><strong>–ó–∞–ø–æ–≤–Ω–µ–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç–µ–π:</strong> {len(mappings)}</p>
        <p><strong>–ó–∞–ª–∏—à–∏–ª–æ—Å—å –∑–∞–ø–æ–≤–Ω–∏—Ç–∏:</strong> {len(unfilled_disciplines)}</p>
    </div>
    """
    
    if unfilled_disciplines:
        html += '<div class="unfilled"><h4>‚ö†Ô∏è –ù–µ–∑–∞–ø–æ–≤–Ω–µ–Ω—ñ –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω–∏:</h4><ul>'
        for code in unfilled_disciplines:
            html += f'<li>{code}: {disciplines[code]}</li>'
        html += '</ul></div>'
    
    # –ú–∞—Ç—Ä–∏—Ü—è –∫–æ–º–ø–µ—Ç–µ–Ω—Ü—ñ–π
    html += '<h2>üéØ –ú–∞—Ç—Ä–∏—Ü—è –∫–æ–º–ø–µ—Ç–µ–Ω—Ü—ñ–π</h2><table>'
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ñ
    html += '<tr><th>–ö–æ–º–ø–µ—Ç–µ–Ω—Ü—ñ—è</th>'
    for disc_code in disciplines.keys():
        html += f'<th class="discipline-header" title="{disciplines[disc_code]}">{disc_code}</th>'
    html += '</tr>'
    
    # –†—è–¥–∫–∏ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü—ñ–π
    for comp_code, comp_desc in competencies.items():
        html += f'<tr><td title="{comp_desc}"><strong>{comp_code}</strong></td>'
        for disc_code in disciplines.keys():
            has_mapping = (disc_code in mappings and 
                          comp_code in mappings[disc_code].get("competencies", []))
            cell_class = "filled" if has_mapping else "empty"
            cell_content = "+" if has_mapping else ""
            html += f'<td class="{cell_class}">{cell_content}</td>'
        html += '</tr>'
    
    html += '</table>'
    
    # –ú–∞—Ç—Ä–∏—Ü—è –ø—Ä–æ–≥—Ä–∞–º–Ω–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
    html += '<h2>üéØ –ú–∞—Ç—Ä–∏—Ü—è –ø—Ä–æ–≥—Ä–∞–º–Ω–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤</h2><table>'
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ñ
    html += '<tr><th>–ü—Ä–æ–≥—Ä–∞–º–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç</th>'
    for disc_code in disciplines.keys():
        html += f'<th class="discipline-header" title="{disciplines[disc_code]}">{disc_code}</th>'
    html += '</tr>'
    
    # –†—è–¥–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
    for prog_code, prog_desc in program_results.items():
        html += f'<tr><td title="{prog_desc}"><strong>{prog_code}</strong></td>'
        for disc_code in disciplines.keys():
            has_mapping = (disc_code in mappings and 
                          prog_code in mappings[disc_code].get("program_results", []))
            cell_class = "filled" if has_mapping else "empty"
            cell_content = "+" if has_mapping else ""
            html += f'<td class="{cell_class}">{cell_content}</td>'
        html += '</tr>'
    
    html += '</table>'
    
    # –î–æ–¥–∞—Ç–∫–æ–≤–∞ —Ç–∞–±–ª–∏—Ü—è: –î–∏—Å—Ü–∏–ø–ª—ñ–Ω–∞ ‚Üí –ö–æ–º–ø–µ—Ç–µ–Ω—Ü—ñ—ó, –ü–†–ù
    html += '<h2>üìã –ó–≤–µ–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü—è –ø–æ –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω–∞—Ö</h2>'
    html += '<table style="width: 100%;">'
    html += '<tr><th style="width: 15%;">–ö–æ–¥</th><th style="width: 30%;">–î–∏—Å—Ü–∏–ø–ª—ñ–Ω–∞</th><th style="width: 27.5%;">–ö–æ–º–ø–µ—Ç–µ–Ω—Ü—ñ—ó</th><th style="width: 27.5%;">–ü—Ä–æ–≥—Ä–∞–º–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏</th></tr>'
    
    for disc_code, disc_name in disciplines.items():
        mapping = mappings.get(disc_code, {})
        comps = mapping.get("competencies", [])
        progs = mapping.get("program_results", [])
        
        # –§–æ—Ä–º–∞—Ç—É—î–º–æ —Å–ø–∏—Å–∫–∏ –∑ –ø—ñ–¥–∫–∞–∑–∫–∞–º–∏
        if comps:
            comp_spans = [f'<span class="tooltip-trigger" data-tooltip="{competencies.get(comp, comp)}">{comp}</span>' for comp in comps]
            comp_text = ", ".join(comp_spans)
        else:
            comp_text = "<em>–Ω–µ –∑–∞–ø–æ–≤–Ω–µ–Ω–æ</em>"
            
        if progs:
            prog_spans = [f'<span class="tooltip-trigger" data-tooltip="{program_results.get(prog, prog)}">{prog}</span>' for prog in progs]
            prog_text = ", ".join(prog_spans)
        else:
            prog_text = "<em>–Ω–µ –∑–∞–ø–æ–≤–Ω–µ–Ω–æ</em>"
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Å—Ç–∏–ª—å —Ä—è–¥–∫–∞
        row_class = "" if (comps or progs) else 'style="background-color: #f8d7da;"'
        
        html += f'<tr {row_class}>'
        html += f'<td><strong><span class="tooltip-trigger" data-tooltip="{disc_name}">{disc_code}</span></strong></td>'
        html += f'<td style="text-align: left; padding-left: 10px;">{disc_name}</td>'
        html += f'<td style="text-align: left; font-size: 0.9em;">{comp_text}</td>'
        html += f'<td style="text-align: left; font-size: 0.9em;">{prog_text}</td>'
        html += '</tr>'
    
    html += '</table>'
    
    # –ü–∞–º'—è—Ç–∫–∞ –∑ —Ä–æ–∑—à–∏—Ñ—Ä–æ–≤–∫–æ—é –∫–æ–º–ø–µ—Ç–µ–Ω—Ü—ñ–π —Ç–∞ –ø—Ä–æ–≥—Ä–∞–º–Ω–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
    html += '<h2>üìñ –ü–∞–º\'—è—Ç–∫–∞: —Ä–æ–∑—à–∏—Ñ—Ä–æ–≤–∫–∞ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü—ñ–π —Ç–∞ –ø—Ä–æ–≥—Ä–∞–º–Ω–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤</h2>'
    
    # –ö–æ–º–ø–µ—Ç–µ–Ω—Ü—ñ—ó
    html += '<h3>üéØ –ö–æ–º–ø–µ—Ç–µ–Ω—Ü—ñ—ó</h3>'
    html += '<table style="width: 100%; font-size: 0.9em;">'
    html += '<tr><th style="width: 10%;">–ö–æ–¥</th><th style="width: 90%;">–û–ø–∏—Å</th></tr>'
    
    for comp_code, comp_desc in competencies.items():
        html += f'<tr><td style="text-align: center;"><strong>{comp_code}</strong></td>'
        html += f'<td style="text-align: left; padding-left: 10px;">{comp_desc}</td></tr>'
    
    html += '</table>'
    
    # –ü—Ä–æ–≥—Ä–∞–º–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
    html += '<h3>üìã –ü—Ä–æ–≥—Ä–∞–º–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –Ω–∞–≤—á–∞–Ω–Ω—è</h3>'
    html += '<table style="width: 100%; font-size: 0.9em;">'
    html += '<tr><th style="width: 10%;">–ö–æ–¥</th><th style="width: 90%;">–û–ø–∏—Å</th></tr>'
    
    for prog_code, prog_desc in program_results.items():
        html += f'<tr><td style="text-align: center;"><strong>{prog_code}</strong></td>'
        html += f'<td style="text-align: left; padding-left: 10px;">{prog_desc}</td></tr>'
    
    html += '</table>'

    # –î–æ–¥–∞—î–º–æ JavaScript –¥–ª—è –ø—ñ–¥–∫–∞–∑–æ–∫
    html += """
    <script>
    document.addEventListener('DOMContentLoaded', function() {
        const triggers = document.querySelectorAll('.tooltip-trigger');
        let currentTooltip = null;
        
        triggers.forEach(trigger => {
            trigger.addEventListener('mouseenter', function(e) {
                // –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—é –ø—ñ–¥–∫–∞–∑–∫—É
                if (currentTooltip) {
                    currentTooltip.remove();
                    currentTooltip = null;
                }
                
                const tooltipText = this.getAttribute('data-tooltip');
                if (!tooltipText) return;
                
                // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É –ø—ñ–¥–∫–∞–∑–∫—É
                const tooltip = document.createElement('div');
                tooltip.className = 'tooltip show';
                tooltip.textContent = tooltipText;
                
                // –î–æ–¥–∞—î–º–æ –¥–æ body
                document.body.appendChild(tooltip);
                currentTooltip = tooltip;
                
                // –ü–æ–∑–∏—Ü—ñ–æ–Ω—É—î–º–æ –ø—ñ–¥–∫–∞–∑–∫—É –≤—ñ–¥–Ω–æ—Å–Ω–æ –∫—É—Ä—Å–æ—Ä–∞
                const rect = this.getBoundingClientRect();
                const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
                const scrollLeft = window.pageXOffset || document.documentElement.scrollLeft;
                
                // –ü–æ–∑–∏—Ü—ñ—è –∑–≤–µ—Ä—Ö—É –≤—ñ–¥ –µ–ª–µ–º–µ–Ω—Ç—É
                let left = rect.left + scrollLeft + (rect.width / 2) - (tooltip.offsetWidth / 2);
                let top = rect.top + scrollTop - tooltip.offsetHeight - 10;
                
                // –Ø–∫—â–æ –≤–∏—Ö–æ–¥–∏—Ç—å –∑–∞ –≤–µ—Ä—Ö–Ω—é –º–µ–∂—É, –ø–æ–∫–∞–∑—É—î–º–æ –∑–Ω–∏–∑—É
                if (top < scrollTop + 10) {
                    top = rect.bottom + scrollTop + 10;
                    // –ó–º—ñ–Ω—é—î–º–æ —Å—Ç—Ä—ñ–ª–æ—á–∫—É
                    tooltip.style.setProperty('--arrow-direction', 'up');
                }
                
                // –Ø–∫—â–æ –≤–∏—Ö–æ–¥–∏—Ç—å –∑–∞ –ª—ñ–≤—É –º–µ–∂—É
                if (left < scrollLeft + 10) {
                    left = scrollLeft + 10;
                }
                
                // –Ø–∫—â–æ –≤–∏—Ö–æ–¥–∏—Ç—å –∑–∞ –ø—Ä–∞–≤—É –º–µ–∂—É
                if (left + tooltip.offsetWidth > scrollLeft + window.innerWidth - 10) {
                    left = scrollLeft + window.innerWidth - tooltip.offsetWidth - 10;
                }
                
                tooltip.style.left = left + 'px';
                tooltip.style.top = top + 'px';
            });
            
            trigger.addEventListener('mouseleave', function() {
                if (currentTooltip) {
                    currentTooltip.classList.remove('show');
                    setTimeout(() => {
                        if (currentTooltip) {
                            currentTooltip.remove();
                            currentTooltip = null;
                        }
                    }, 200);
                }
            });
        });
        
        // –í–∏–¥–∞–ª—è—î–º–æ –ø—ñ–¥–∫–∞–∑–∫—É –ø—Ä–∏ –ø—Ä–æ–∫—Ä—É—Ç—Ü—ñ –∞–±–æ –∫–ª—ñ–∫—É
        window.addEventListener('scroll', function() {
            if (currentTooltip) {
                currentTooltip.remove();
                currentTooltip = null;
            }
        });
        
        document.addEventListener('click', function() {
            if (currentTooltip) {
                currentTooltip.remove();
                currentTooltip = null;
            }
        });
        
        console.log('Tooltip script loaded. Found triggers:', triggers.length);
    });
    </script>
    </body></html>"""
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–∞ –≤—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ
    temp_file = Path(yaml_file).with_suffix('.html')
    with open(temp_file, 'w', encoding='utf-8') as f:
        f.write(html)
    
    webbrowser.open(f'file://{temp_file.absolute()}')
    print(f"üìä HTML –∑–≤—ñ—Ç –≤—ñ–¥–∫—Ä–∏—Ç–æ –≤ –±—Ä–∞—É–∑–µ—Ä—ñ: {temp_file}")


def show_statistics(yaml_file="curriculum.yaml"):
    """
    –ü–æ–∫–∞–∑—É—î –¥–µ—Ç–∞–ª—å–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –∫–æ–Ω—Å–æ–ª—ñ
    """
    with open(yaml_file, "r", encoding="utf-8") as f:
        config = yaml.safe_load(f)

    disciplines = config["disciplines"]
    competencies = config["competencies"]
    program_results = config["program_results"]
    mappings = config.get("mappings", {})

    print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ú–ê–¢–†–ò–¶–¨")
    print("=" * 50)

    # –ó–∞–≥–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
    print(f"üìö –í—Å—å–æ–≥–æ –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω: {len(disciplines)}")
    print(f"üéØ –í—Å—å–æ–≥–æ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü—ñ–π: {len(competencies)}")
    print(f"üìã –í—Å—å–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–Ω–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤: {len(program_results)}")
    print(f"‚úÖ –ó–∞–ø–æ–≤–Ω–µ–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç–µ–π: {len(mappings)}")
    print(f"‚ùå –ù–µ–∑–∞–ø–æ–≤–Ω–µ–Ω–æ: {len(disciplines) - len(mappings)}")

    if len(mappings) == 0:
        print("\n‚ö†Ô∏è  –í—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ —â–µ –Ω–µ –∑–∞–ø–æ–≤–Ω–µ–Ω—ñ!")
        return

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü—ñ—è–º
    comp_usage = {}
    for mapping in mappings.values():
        for comp in mapping.get("competencies", []):
            comp_usage[comp] = comp_usage.get(comp, 0) + 1

    print(f"\nüéØ –í–ò–ö–û–†–ò–°–¢–ê–ù–ù–Ø –ö–û–ú–ü–ï–¢–ï–ù–¶–Ü–ô:")
    print("-" * 30)
    for comp_code in sorted(competencies.keys()):
        count = comp_usage.get(comp_code, 0)
        print(f"{comp_code}: {count:2d} –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω")

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–Ω–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
    prog_usage = {}
    for mapping in mappings.values():
        for prog in mapping.get("program_results", []):
            prog_usage[prog] = prog_usage.get(prog, 0) + 1

    print(f"\nüìã –í–ò–ö–û–†–ò–°–¢–ê–ù–ù–Ø –ü–†–û–ì–†–ê–ú–ù–ò–• –†–ï–ó–£–õ–¨–¢–ê–¢–Ü–í:")
    print("-" * 30)
    for prog_code in sorted(program_results.keys()):
        count = prog_usage.get(prog_code, 0)
        print(f"{prog_code}: {count:2d} –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω")

    # –ù–µ–∑–∞–ø–æ–≤–Ω–µ–Ω—ñ –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω–∏
    unfilled = [code for code in disciplines.keys() if code not in mappings]
    if unfilled:
        print(f"\n‚ùå –ù–ï–ó–ê–ü–û–í–ù–ï–ù–Ü –î–ò–°–¶–ò–ü–õ–Ü–ù–ò ({len(unfilled)}):")
        print("-" * 30)
        for code in unfilled:
            print(f"{code}: {disciplines[code]}")


def validate_data(yaml_file="curriculum.yaml"):
    """
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î –∫–æ—Ä–µ–∫—Ç–Ω—ñ—Å—Ç—å –¥–∞–Ω–∏—Ö —É YAML —Ñ–∞–π–ª—ñ
    """
    try:
        with open(yaml_file, "r", encoding="utf-8") as f:
            config = yaml.safe_load(f)
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è YAML: {e}")
        return False

    print("üîç –í–ê–õ–Ü–î–ê–¶–Ü–Ø –î–ê–ù–ò–•")
    print("=" * 30)

    errors = []
    warnings = []

    disciplines = config.get("disciplines", {})
    competencies = config.get("competencies", {})
    program_results = config.get("program_results", {})
    mappings = config.get("mappings", {})

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    if not disciplines:
        errors.append("–í—ñ–¥—Å—É—Ç–Ω—è —Å–µ–∫—Ü—ñ—è 'disciplines'")
    if not competencies:
        errors.append("–í—ñ–¥—Å—É—Ç–Ω—è —Å–µ–∫—Ü—ñ—è 'competencies'")
    if not program_results:
        errors.append("–í—ñ–¥—Å—É—Ç–Ω—è —Å–µ–∫—Ü—ñ—è 'program_results'")

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ
    for disc_code, mapping in mappings.items():
        if disc_code not in disciplines:
            errors.append(f"–ù–µ–≤—ñ–¥–æ–º–∞ –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω–∞ –≤ mappings: {disc_code}")

        for comp in mapping.get("competencies", []):
            if comp not in competencies:
                errors.append(f"–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü—ñ—è: {comp} (—É {disc_code})")

        for prog in mapping.get("program_results", []):
            if prog not in program_results:
                errors.append(f"–ù–µ–≤—ñ–¥–æ–º–∏–π –ø—Ä–æ–≥—Ä–∞–º–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {prog} (—É {disc_code})")

    # –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –ø—Ä–æ –Ω–µ–∑–∞–ø–æ–≤–Ω–µ–Ω—ñ –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω–∏
    unfilled_count = len(disciplines) - len(mappings)
    if unfilled_count > 0:
        warnings.append(f"–ù–µ–∑–∞–ø–æ–≤–Ω–µ–Ω–æ {unfilled_count} –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω")

    # –í–∏–≤–æ–¥–∏–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
    if errors:
        print("‚ùå –ü–û–ú–ò–õ–ö–ò:")
        for error in errors:
            print(f"  ‚Ä¢ {error}")

    if warnings:
        print("\n‚ö†Ô∏è  –ü–û–ü–ï–†–ï–î–ñ–ï–ù–ù–Ø:")
        for warning in warnings:
            print(f"  ‚Ä¢ {warning}")

    if not errors and not warnings:
        print("‚úÖ –í—Å—ñ –¥–∞–Ω—ñ –∫–æ—Ä–µ–∫—Ç–Ω—ñ!")
    elif not errors:
        print("‚úÖ –ö—Ä–∏—Ç–∏—á–Ω–∏—Ö –ø–æ–º–∏–ª–æ–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

    return len(errors) == 0


def create_yaml_template(filename="curriculum.yaml"):
    """
    –°—Ç–≤–æ—Ä—é—î YAML —à–∞–±–ª–æ–Ω –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
    """

    template = {
        # –î–∏—Å—Ü–∏–ø–ª—ñ–Ω–∏: –∫–æ–¥ -> –ø–æ–≤–Ω–∞ –Ω–∞–∑–≤–∞
        "disciplines": {
            "–ó–û 01": "–ú–∞—Ç–µ–º–∞—Ç–∏—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑",
            "–ó–û 02": "–ê–ª–≥–µ–±—Ä–∞ —Ç–∞ –≥–µ–æ–º–µ—Ç—Ä—ñ—è",
            "–ó–û 03": "–ú–µ—Ö–∞–Ω—ñ–∫–∞",
            "–ó–û 04": "–¢–µ—Ä–º–æ–¥–∏–Ω–∞–º—ñ–∫–∞ —Ç–∞ –º–æ–ª–µ–∫—É–ª—è—Ä–Ω–∞ —Ñ—ñ–∑–∏–∫–∞",
            "–ó–û 05": "–î–∏—Ñ–µ—Ä–µ–Ω—Ü—ñ–∞–ª—å–Ω—ñ —Ä—ñ–≤–Ω—è–Ω–Ω—è",
            "–ó–û 06": "–ï–ª–µ–∫—Ç—Ä–∏–∫–∞ —Ç–∞ –º–∞–≥–Ω–µ—Ç–∏–∑–º",
            "–ó–û 07": "–û–ø—Ç–∏–∫–∞",
            "–ó–û 08": "–ê—Ç–æ–º–Ω–∞ —Ñ—ñ–∑–∏–∫–∞",
            "–ó–û 09": "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –º–æ–≤–∞ –∑–∞ –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–º —Å–ø—Ä—è–º—É–≤–∞–Ω–Ω—è–º",
            "–ó–û 10": "–Ü—Å—Ç–æ—Ä—ñ—è –Ω–∞—É–∫–∏ —ñ —Ç–µ—Ö–Ω—ñ–∫–∏",
            "–ó–û 11": "–û—Å–Ω–æ–≤–∏ –∑–¥–æ—Ä–æ–≤–æ–≥–æ —Å–ø–æ—Å–æ–±—É –∂–∏—Ç—Ç—è",
            "–ó–û 12": "–ü—Ä–∞–∫—Ç–∏—á–Ω–∏–π –∫—É—Ä—Å —ñ–Ω–æ–∑–µ–º–Ω–æ—ó –º–æ–≤–∏",
            "–ó–û 13": "–ï–∫–æ–ª–æ–≥—ñ—è",
            "–ó–û 14": "–§—ñ–ª–æ—Å–æ—Ñ—Å—å–∫—ñ –æ—Å–Ω–æ–≤–∏ –Ω–∞—É–∫–æ–≤–æ–≥–æ –ø—ñ–∑–Ω–∞–Ω–Ω—è",
            "–ó–û 15": "–û—Å–Ω–æ–≤–∏ –µ–∫–æ–Ω–æ–º—ñ–∫–∏",
            "–ó–û 16": "–ü—Ä–∞–∫—Ç–∏—á–Ω–∏–π –∫—É—Ä—Å —ñ–Ω–æ–∑–µ–º–Ω–æ—ó –º–æ–≤–∏ –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–æ–≥–æ —Å–ø—Ä—è–º—É–≤–∞–Ω–Ω—è",
            "–ó–û 17": "–ë–µ–∑–ø–µ–∫–∞ –∂–∏—Ç—Ç—î–¥—ñ—è–ª—å–Ω–æ—Å—Ç—ñ —Ç–∞ —Ü–∏–≤—ñ–ª—å–Ω—ñ–π –∑–∞—Ö–∏—Å—Ç",
            "–ó–û 18": "–ü—Ä–∞–≤–∞ —ñ —Å–≤–æ–±–æ–¥–∏ –ª—é–¥–∏–Ω–∏",
            "–ó–û 19": "–•—ñ–º—ñ—è",
            "–ó–û 20": "–¢–µ–æ—Ä—ñ—è –π–º–æ–≤—ñ—Ä–Ω–æ—Å—Ç—ñ —Ç–∞ –º–∞—Ç–µ–º–∞—Ç–∏—á–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
            "–ü–û 01": "–ü—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è",
            "–ü–û 02": "–ö–æ–º–ø'—é—Ç–µ—Ä–Ω–∞ –≥—Ä–∞—Ñ—ñ–∫–∞",
            "–ü–û 03": "–í–≤–µ–¥–µ–Ω–Ω—è –≤ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å",
            "–ü–û 04": "–¢–µ–Ω–∑–æ—Ä–Ω–∏–π –∞–Ω–∞–ª—ñ–∑",
            "–ü–û 05": "–ü—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è –°++",
            "–ü–û 06": "–ö–ª–∞—Å–∏—á–Ω–∞ –º–µ—Ö–∞–Ω—ñ–∫–∞",
            "–ü–û 07": "–ö–æ–º–ø'—é—Ç–µ—Ä–Ω—ñ –ø–∞–∫–µ—Ç–∏ –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—è –Ω–∞—É–∫–æ–≤–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ (Origin, LaTeX, Gnuplot)",
            "–ü–û 08": "–†—ñ–≤–Ω—è–Ω–Ω—è –º–∞—Ç–µ–º–∞—Ç–∏—á–Ω–æ—ó —Ñ—ñ–∑–∏–∫–∏",
            "–ü–û 09": "–û–±—á–∏—Å–ª—é–≤–∞–ª—å–Ω—ñ –º–µ—Ç–æ–¥–∏",
            "–ü–û 10": "–ú–∞—Ç–µ–º–∞—Ç–∏—á–Ω–µ –º–æ–¥–µ–ª—é–≤–∞–Ω–Ω—è —Ç–∞ –≤—ñ–¥–∫—Ä–∏—Ç—ñ –ø–∞–∫–µ—Ç–∏ –ø—Ä–∏–∫–ª–∞–¥–Ω–∏—Ö –ø—Ä–æ–≥—Ä–∞–º",
            "–ü–û 11": "–¢–µ–æ—Ä—ñ—è –ø–æ–ª—è",
            "–ü–û 12": "–ï–ª–µ–∫—Ç—Ä–æ–¥–∏–Ω–∞–º—ñ–∫–∞ —Å—É—Ü—ñ–ª—å–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â",
            "–ü–û 13": "–ö–æ–ª–∏–≤–∞–Ω–Ω—è —Ç–∞ —Ö–≤–∏–ª—ñ",
            "–ü–û 14": "–ö–≤–∞–Ω—Ç–æ–≤–∞ –º–µ—Ö–∞–Ω—ñ–∫–∞",
            "–ü–û 15": "–°—Ç–∞—Ç–∏—Å—Ç–∏—á–Ω–∞ —Ñ—ñ–∑–∏–∫–∞ —Ç–∞ –æ—Å–Ω–æ–≤–∏ —Ñ—ñ–∑–∏–∫–∏ —Ç–≤–µ—Ä–¥–æ–≥–æ —Ç—ñ–ª–∞",
            "–ü–û 16": "–°—Ç–∞—Ç–∏—Å—Ç–∏—á–Ω–∞ —Ä–∞–¥—ñ–æ—Ñ—ñ–∑–∏–∫–∞ —Ç–∞ –æ–ø—Ç–∏–∫–∞",
            "–ü–û 17": "–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ-–¥–æ—Å–ª—ñ–¥–Ω–∏—Ü—å–∫–∏–π –ø—Ä–∞–∫—Ç–∏–∫—É–º",
            "–ü–û 18": "–ú—ñ–∂–¥–∏—Å—Ü–∏–ø–ª—ñ–Ω–∞—Ä–Ω–∞ –∫—É—Ä—Å–æ–≤–∞ —Ä–æ–±–æ—Ç–∞",
            "–ü–û 19": "–û—Å–Ω–æ–≤–∏ –Ω–∞—É–∫–æ–≤–∏—Ö –¥–æ—Å–ª—ñ–¥–∂–µ–Ω—å",
            "–ü–û 20": "–ü–µ—Ä–µ–¥–¥–∏–ø–ª–æ–º–Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–∞",
            "–ü–û 21": "–î–∏–ø–ª–æ–º–Ω–µ –ø—Ä–æ—î–∫—Ç—É–≤–∞–Ω–Ω—è",
        },
        # –ö–æ–º–ø–µ—Ç–µ–Ω—Ü—ñ—ó: –∫–æ–¥ -> –æ–ø–∏—Å
        "competencies": {
            "–ó–ö 1": "–ó–¥–∞—Ç–Ω—ñ—Å—Ç—å –∑–∞—Å—Ç–æ—Å–æ–≤—É–≤–∞—Ç–∏ –∑–Ω–∞–Ω–Ω—è —É –ø—Ä–∞–∫—Ç–∏—á–Ω–∏—Ö —Å–∏—Ç—É–∞—Ü—ñ—è—Ö",
            "–ó–ö 2": "–ó–Ω–∞–Ω–Ω—è —Ç–∞ —Ä–æ–∑—É–º—ñ–Ω–Ω—è –ø—Ä–µ–¥–º–µ—Ç–Ω–æ—ó –æ–±–ª–∞—Å—Ç—ñ",
            "–ó–ö 3": "–ó–¥–∞—Ç–Ω—ñ—Å—Ç—å —Å–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—è –¥–µ—Ä–∂–∞–≤–Ω–æ—é –º–æ–≤–æ—é",
            "–ó–ö 4": "–ó–¥–∞—Ç–Ω—ñ—Å—Ç—å —Å–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—è —ñ–Ω–æ–∑–µ–º–Ω–æ—é –º–æ–≤–æ—é",
            "–ó–ö 5": "–ó–¥–∞—Ç–Ω—ñ—Å—Ç—å –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –Ü–ö–¢",
            "–ó–ö 6": "–ó–¥–∞—Ç–Ω—ñ—Å—Ç—å –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è –¥–æ—Å–ª—ñ–¥–∂–µ–Ω—å",
            "–ó–ö 7": "–ó–¥–∞—Ç–Ω—ñ—Å—Ç—å –¥–æ –ø–æ—à—É–∫—É —Ç–∞ –∞–Ω–∞–ª—ñ–∑—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó",
            "–ó–ö 8": "–ó–¥–∞—Ç–Ω—ñ—Å—Ç—å –¥–æ –º—ñ–∂–æ—Å–æ–±–∏—Å—Ç—ñ—Å–Ω–æ—ó –≤–∑–∞—î–º–æ–¥—ñ—ó",
            "–ó–ö 9": "–ó–¥–∞—Ç–Ω—ñ—Å—Ç—å –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ",
            "–ó–ö 10": "–ó–¥–∞—Ç–Ω—ñ—Å—Ç—å –∑–¥—ñ–π—Å–Ω—é–≤–∞—Ç–∏ –±–µ–∑–ø–µ—á–Ω—É –¥—ñ—è–ª—å–Ω—ñ—Å—Ç—å",
            "–ó–ö 11": "–ó–¥–∞—Ç–Ω—ñ—Å—Ç—å —Ä–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –ø—Ä–∞–≤–∞ —ñ –æ–±–æ–≤'—è–∑–∫–∏",
            "–ó–ö 12": "–ó–¥–∞—Ç–Ω—ñ—Å—Ç—å –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ –∫—É–ª—å—Ç—É—Ä–Ω—ñ —Ü—ñ–Ω–Ω–æ—Å—Ç—ñ",
            "–ó–ö 13": "–ó–¥–∞—Ç–Ω—ñ—Å—Ç—å –∫—Ä–∏—Ç–∏—á–Ω–æ –æ—Ü—ñ–Ω—é–≤–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏",
            "–ó–ö 14": "–ó–¥–∞—Ç–Ω—ñ—Å—Ç—å –¥–æ —Å–∞–º–æ—Å—Ç—ñ–π–Ω–æ–≥–æ –Ω–∞–≤—á–∞–Ω–Ω—è",
            "–ó–ö 15": "–í—ñ–π—Å—å–∫–æ–≤–∞ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∞",
            "–§–ö 1": "–£—á–∞—Å—Ç—å —É –Ω–∞—É–∫–æ–≤–∏—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö",
            "–§–ö 2": "–£—á–∞—Å—Ç—å —É –µ–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞—Ö —Ç–∞ –¥–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è—Ö",
            "–§–ö 3": "–í–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—è –µ–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–∏—Ö –∑—Ä–∞–∑–∫—ñ–≤",
            "–§–ö 4": "–í–ø—Ä–æ–≤–∞–¥–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –¥–æ—Å–ª—ñ–¥–∂–µ–Ω—å",
            "–§–ö 5": "–†–æ–∑–≤–∏—Ç–æ–∫ –∫–æ–º–ø–µ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–µ–π —É –ø—Ä–∏–∫–ª–∞–¥–Ω—ñ–π —Ñ—ñ–∑–∏—Ü—ñ",
            "–§–ö 6": "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Å—É—á–∞—Å–Ω–∏—Ö —Ç–µ–æ—Ä–µ—Ç–∏—á–Ω–∏—Ö —É—è–≤–ª–µ–Ω—å",
            "–§–ö 7": "–ú–µ—Ç–æ–¥–∏ —Ç–µ–æ—Ä–µ—Ç–∏—á–Ω–æ–≥–æ –¥–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è",
            "–§–ö 8": "–†–æ–±–æ—Ç–∞ –≤ –∫–æ–ª–µ–∫—Ç–∏–≤—ñ",
            "–§–ö 9": "–ü—Ä–æ–≤–µ–¥–µ–Ω–Ω—è –Ω–∞—É–∫–æ–≤–∏—Ö –¥–æ—Å–ª—ñ–¥–∂–µ–Ω—å",
            "–§–ö 10": "–ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –º–∞—Ç–µ–º–∞—Ç–∏—á–Ω–æ–≥–æ –∞–ø–∞—Ä–∞—Ç—É",
            "–§–ö 11": "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–æ-–æ—Ä—ñ—î–Ω—Ç–æ–≤–∞–Ω–∏—Ö –∑–Ω–∞–Ω—å",
        },
        # –ü—Ä–æ–≥—Ä–∞–º–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –Ω–∞–≤—á–∞–Ω–Ω—è
        "program_results": {
            "–ü–†–ù 1": "–ó–Ω–∞—Ç–∏ —Å—É—á–∞—Å–Ω—É —Ñ—ñ–∑–∏–∫—É –Ω–∞ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ–º—É —Ä—ñ–≤–Ω—ñ",
            "–ü–†–ù 2": "–ó–∞—Å—Ç–æ—Å–æ–≤—É–≤–∞—Ç–∏ –º–∞—Ç–µ–º–∞—Ç–∏—á–Ω—ñ –º–µ—Ç–æ–¥–∏",
            "–ü–†–ù 3": "–ó–∞—Å—Ç–æ—Å–æ–≤—É–≤–∞—Ç–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó –µ–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –¥–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è",
            "–ü–†–ù 4": "–ó–∞—Å—Ç–æ—Å–æ–≤—É–≤–∞—Ç–∏ –º–æ–¥–µ–ª—ñ –¥–ª—è –¥–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è —è–≤–∏—â",
            "–ü–†–ù 5": "–í–∏–±–∏—Ä–∞—Ç–∏ –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ –º–µ—Ç–æ–¥–∏ –¥–æ—Å–ª—ñ–¥–∂–µ–Ω—å",
            "–ü–†–ù 6": "–í—ñ–¥—à—É–∫–æ–≤—É–≤–∞—Ç–∏ –Ω–∞—É–∫–æ–≤–æ-—Ç–µ—Ö–Ω—ñ—á–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é",
            "–ü–†–ù 7": "–ê–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –Ω–∞—É–∫–æ–≤–æ-—Ç–µ—Ö–Ω—ñ—á–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é",
            "–ü–†–ù 8": "–°–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—è –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–æ –¥–µ—Ä–∂–∞–≤–Ω–æ—é —Ç–∞ –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é –º–æ–≤–∞–º–∏",
            "–ü–†–ù 9": "–ü—Ä–µ–∑–µ–Ω—Ç—É–≤–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –¥–æ—Å–ª—ñ–¥–∂–µ–Ω—å",
            "–ü–†–ù 10": "–ü–ª–∞–Ω—É–≤–∞—Ç–∏ –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω—É –¥—ñ—è–ª—å–Ω—ñ—Å—Ç—å",
            "–ü–†–ù 11": "–ó–Ω–∞—Ç–∏ —Ü—ñ–ª—ñ —Å—Ç–∞–ª–æ–≥–æ —Ä–æ–∑–≤–∏—Ç–∫—É",
            "–ü–†–ù 12": "–†–æ–∑—É–º—ñ—Ç–∏ –∑–∞–∫–æ–Ω–æ–º—ñ—Ä–Ω–æ—Å—Ç—ñ —Ä–æ–∑–≤–∏—Ç–∫—É –ø—Ä–∏–∫–ª–∞–¥–Ω–æ—ó —Ñ—ñ–∑–∏–∫–∏",
            "–ü–†–ù 13": "–û—Ü—ñ–Ω—é–≤–∞—Ç–∏ –≤–∏—Ç—Ä–∞—Ç–∏ —Ç–∞ –Ω–∞—Å–ª—ñ–¥–∫–∏ –ø—Ä–æ–µ–∫—Ç—ñ–≤",
            "–ü–†–ù 14": "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –º–µ—Ç–æ–¥–∏ –¥–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤",
            "–ü–†–ù 15": "–ó–Ω–∞–Ω–Ω—è –º–µ—Ç–æ–¥–æ–ª–æ–≥—ñ—ó –Ω–∞—É–∫–æ–≤–∏—Ö –¥–æ—Å–ª—ñ–¥–∂–µ–Ω—å",
            "–ü–†–ù 16": "–ó–Ω–∞–Ω–Ω—è –º–∞—Ç–µ–º–∞—Ç–∏—á–Ω–∏—Ö —Ç–∞ –∫–æ–º–ø'—é—Ç–µ—Ä–Ω–∏—Ö –º–µ—Ç–æ–¥—ñ–≤",
            "–ü–†–ù 17": "–ó–Ω–∞–Ω–Ω—è –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–æ-–æ—Ä—ñ—î–Ω—Ç–æ–≤–∞–Ω–∏—Ö –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω",
        },
        # –ì–û–õ–û–í–ù–ï! –í—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ: –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω–∞ -> —è–∫—ñ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü—ñ—ó/—Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≤–æ–Ω–∞ –∑–∞–±–µ–∑–ø–µ—á—É—î
        "mappings": {
            # –ü—Ä–∏–∫–ª–∞–¥–∏ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è - —Ä–µ—à—Ç—É –¥–æ–¥–∞–≤–∞–π—Ç–µ —á–µ—Ä–µ–∑ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π —Ä–µ–∂–∏–º!
            "–ó–û 01": {  # –ú–∞—Ç–µ–º–∞—Ç–∏—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑
                "competencies": ["–ó–ö 1", "–ó–ö 2", "–ó–ö 14", "–§–ö 6", "–§–ö 7"],
                "program_results": ["–ü–†–ù 1", "–ü–†–ù 2", "–ü–†–ù 16"],
            },
            "–ü–û 01": {  # –ü—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è
                "competencies": ["–ó–ö 1", "–ó–ö 5", "–ó–ö 9", "–§–ö 5", "–§–ö 10"],
                "program_results": ["–ü–†–ù 2", "–ü–†–ù 4", "–ü–†–ù 16"],
            },
        },
    }

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ YAML —Ñ–∞–π–ª
    with open(filename, "w", encoding="utf-8") as f:
        yaml.dump(
            template,
            f,
            allow_unicode=True,
            default_flow_style=False,
            indent=2,
            sort_keys=False,
        )

    print(f"üìù YAML —à–∞–±–ª–æ–Ω —Å—Ç–≤–æ—Ä–µ–Ω–æ: {filename}")
    print("üéØ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π —Ä–µ–∂–∏–º –¥–ª—è –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è —Ä–µ—à—Ç–∏!")


def main_menu():
    """
    –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –ø—Ä–æ–≥—Ä–∞–º–∏
    """
    # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ —Ä—è–¥–∫–∞
    parser = argparse.ArgumentParser(description="–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –º–∞—Ç—Ä–∏—Ü—å –∫–æ–º–ø–µ—Ç–µ–Ω—Ü—ñ–π")
    parser.add_argument(
        "yaml_file",
        nargs="?",
        default="curriculum.yaml",
        help="–®–ª—è—Ö –¥–æ YAML —Ñ–∞–π–ª—É (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º: curriculum.yaml)",
    )
    parser.add_argument("--excel", "-e", help="–ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ Excel —Ç–∞ –≤–∏–π—Ç–∏")
    parser.add_argument(
        "--html", "-t", help="–ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ HTML —Ç–∞ –≤–∏–π—Ç–∏", action="store_true"
    )
    parser.add_argument(
        "--stats", "-s", action="store_true", help="–ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–∞ –≤–∏–π—Ç–∏"
    )

    args = parser.parse_args()
    yaml_file = args.yaml_file

    # –®–≤–∏–¥–∫—ñ –∫–æ–º–∞–Ω–¥–∏ –±–µ–∑ –º–µ–Ω—é
    if args.excel:
        if not Path(yaml_file).exists():
            print(f"‚ùå –§–∞–π–ª {yaml_file} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
            return
        generate_matrices_from_yaml(yaml_file, args.excel)
        return

    if args.html:
        if not Path(yaml_file).exists():
            print(f"‚ùå –§–∞–π–ª {yaml_file} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
            return
        generate_html_report(yaml_file)
        return

    if args.stats:
        if not Path(yaml_file).exists():
            print(f"‚ùå –§–∞–π–ª {yaml_file} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
            return
        show_statistics(yaml_file)
        return

    # –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–µ –º–µ–Ω—é
    while True:
        print("\n" + "=" * 60)
        print("üöÄ –ì–ï–ù–ï–†–ê–¢–û–† –ú–ê–¢–†–ò–¶–¨ –ö–û–ú–ü–ï–¢–ï–ù–¶–Ü–ô")
        print("=" * 60)
        print(f"üìÅ –†–æ–±–æ—á–∏–π —Ñ–∞–π–ª: {yaml_file}")
        if not Path(yaml_file).exists():
            print("‚ö†Ô∏è  –§–∞–π–ª –Ω–µ —ñ—Å–Ω—É—î - —Å—Ç–≤–æ—Ä—ñ—Ç—å —à–∞–±–ª–æ–Ω (–æ–ø—Ü—ñ—è 6)")
        print("=" * 60)
        print("1. üìù –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–µ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç–µ–π")
        print("2. üìä –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è Excel –º–∞—Ç—Ä–∏—Ü—å")
        print("3. üåê HTML –∑–≤—ñ—Ç (–≤—ñ–¥–∫—Ä–∏—Ç–∏ –≤ –±—Ä–∞—É–∑–µ—Ä—ñ)")
        print("4. üìà –ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
        print("5. üîç –í–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö")
        print("6. üìÑ –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π YAML —à–∞–±–ª–æ–Ω")
        print("7. üìÇ –ó–º—ñ–Ω–∏—Ç–∏ —Ä–æ–±–æ—á–∏–π —Ñ–∞–π–ª")
        print("0. ‚ùå –í–∏—Ö—ñ–¥")
        print("=" * 60)

        choice = input("–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é (0-7): ").strip()

        try:
            if choice == "1":
                if not Path(yaml_file).exists():
                    print(f"‚ùå –§–∞–π–ª {yaml_file} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
                    print("üìù –°—Ç–≤–æ—Ä—ñ—Ç—å —Å–ø–æ—á–∞—Ç–∫—É —à–∞–±–ª–æ–Ω (–æ–ø—Ü—ñ—è 6)")
                else:
                    interactive_fill_mappings(yaml_file)

            elif choice == "2":
                if not Path(yaml_file).exists():
                    print(f"‚ùå –§–∞–π–ª {yaml_file} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
                else:
                    excel_file = input(
                        f"–ù–∞–∑–≤–∞ Excel —Ñ–∞–π–ª—É (Enter –¥–ª—è {Path(yaml_file).stem}.xlsx): "
                    ).strip()
                    if not excel_file:
                        excel_file = f"{Path(yaml_file).stem}.xlsx"
                    generate_matrices_from_yaml(yaml_file, excel_file)

            elif choice == "3":
                if not Path(yaml_file).exists():
                    print(f"‚ùå –§–∞–π–ª {yaml_file} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
                else:
                    generate_html_report(yaml_file)

            elif choice == "4":
                if not Path(yaml_file).exists():
                    print(f"‚ùå –§–∞–π–ª {yaml_file} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
                else:
                    show_statistics(yaml_file)

            elif choice == "5":
                if not Path(yaml_file).exists():
                    print(f"‚ùå –§–∞–π–ª {yaml_file} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
                else:
                    validate_data(yaml_file)

            elif choice == "6":
                if Path(yaml_file).exists():
                    overwrite = input(
                        f"‚ö†Ô∏è  –§–∞–π–ª {yaml_file} –≤–∂–µ —ñ—Å–Ω—É—î. –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç–∏? (y/N): "
                    )
                    if overwrite.lower() != "y":
                        print("‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–æ")
                        continue
                create_yaml_template(yaml_file)

            elif choice == "7":
                new_file = input("–í–≤–µ–¥—ñ—Ç—å —à–ª—è—Ö –¥–æ YAML —Ñ–∞–π–ª—É: ").strip()
                if new_file:
                    yaml_file = new_file
                    print(f"‚úÖ –†–æ–±–æ—á–∏–π —Ñ–∞–π–ª –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞: {yaml_file}")

            elif choice == "0":
                print("üëã –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!")
                break

            else:
                print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä! –û–±–µ—Ä—ñ—Ç—å –≤—ñ–¥ 0 –¥–æ 7")

        except KeyboardInterrupt:
            print("\nüëã –ü—Ä–æ–≥—Ä–∞–º—É –ø–µ—Ä–µ—Ä–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
            break
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

        input("\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")


if __name__ == "__main__":
    # –î–æ–¥–∞—î–º–æ –ø—Ä–∏–∫–ª–∞–¥–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
    if len(sys.argv) > 1 and sys.argv[1] in ["--help", "-h", "help"]:
        print("""
üöÄ –ì–ï–ù–ï–†–ê–¢–û–† –ú–ê–¢–†–ò–¶–¨ –ö–û–ú–ü–ï–¢–ï–ù–¶–Ü–ô

–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:
  python matrix2.py                          # –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–µ –º–µ–Ω—é (curriculum.yaml)
  python matrix2.py bachelor.yaml           # –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–µ –º–µ–Ω—é (bachelor.yaml)
  python matrix2.py bachelor.yaml --excel bachelor.xlsx   # –¢—ñ–ª—å–∫–∏ Excel
  python matrix2.py bachelor.yaml --html                  # –¢—ñ–ª—å–∫–∏ HTML
  python matrix2.py bachelor.yaml --stats                 # –¢—ñ–ª—å–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

–ü—Ä–∏–∫–ª–∞–¥–∏:
  python matrix2.py bachelor.yaml -e bachelor_matrices.xlsx
  python matrix2.py master.yaml -h  
  python matrix2.py curriculum.yaml -s
        """)
        sys.exit(0)

    main_menu()
