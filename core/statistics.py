import yaml


def show_statistics(yaml_file="curriculum.yaml"):
    """
    –ü–æ–∫–∞–∑—É—î –¥–µ—Ç–∞–ª—å–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –∫–æ–Ω—Å–æ–ª—ñ
    """
    with open(yaml_file, "r", encoding="utf-8") as f:
        config = yaml.safe_load(f)

    disciplines = config["disciplines"]
    competencies = config["competencies"]
    program_results = config["program_results"]
    mappings = config.get("mappings", {})

    print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ú–ê–¢–†–ò–¶–¨")
    print("=" * 50)

    # –ó–∞–≥–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
    print(f"üìö –í—Å—å–æ–≥–æ –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω: {len(disciplines)}")
    print(f"üéØ –í—Å—å–æ–≥–æ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü—ñ–π: {len(competencies)}")
    print(f"üìã –í—Å—å–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–Ω–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤: {len(program_results)}")
    print(f"‚úÖ –ó–∞–ø–æ–≤–Ω–µ–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç–µ–π: {len(mappings)}")
    print(f"‚ùå –ù–µ–∑–∞–ø–æ–≤–Ω–µ–Ω–æ: {len(disciplines) - len(mappings)}")

    if len(mappings) == 0:
        print("\n‚ö†Ô∏è  –í—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ —â–µ –Ω–µ –∑–∞–ø–æ–≤–Ω–µ–Ω—ñ!")
        return

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü—ñ—è–º
    comp_usage = {}
    for mapping in mappings.values():
        for comp in mapping.get("competencies", []):
            comp_usage[comp] = comp_usage.get(comp, 0) + 1

    print("\nüéØ –í–ò–ö–û–†–ò–°–¢–ê–ù–ù–Ø –ö–û–ú–ü–ï–¢–ï–ù–¶–Ü–ô:")
    print("-" * 30)
    for comp_code in sorted(competencies.keys()):
        count = comp_usage.get(comp_code, 0)
        print(f"{comp_code}: {count:2d} –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω")

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–Ω–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
    prog_usage = {}
    for mapping in mappings.values():
        for prog in mapping.get("program_results", []):
            prog_usage[prog] = prog_usage.get(prog, 0) + 1

    print("\nüìã –í–ò–ö–û–†–ò–°–¢–ê–ù–ù–Ø –ü–†–û–ì–†–ê–ú–ù–ò–• –†–ï–ó–£–õ–¨–¢–ê–¢–Ü–í:")
    print("-" * 30)
    for prog_code in sorted(program_results.keys()):
        count = prog_usage.get(prog_code, 0)
        print(f"{prog_code}: {count:2d} –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω")

    # –ù–µ–∑–∞–ø–æ–≤–Ω–µ–Ω—ñ –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω–∏
    unfilled = [code for code in disciplines.keys() if code not in mappings]
    if unfilled:
        print(f"\n‚ùå –ù–ï–ó–ê–ü–û–í–ù–ï–ù–Ü –î–ò–°–¶–ò–ü–õ–Ü–ù–ò ({len(unfilled)}):")
        print("-" * 30)
        for code in unfilled:
            print(f"{code}: {disciplines[code]}")